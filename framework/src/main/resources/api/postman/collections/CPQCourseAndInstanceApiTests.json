{
	"info": {
		"_postman_id": "e32f2d03-4eef-453d-88f3-626374e08d93",
		"name": "CPQ Course and Instance api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Token for PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"pf_graph_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "audience",
							"value": "{{pf_auth0_token_audience}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "{{pf_auth0_token_grant_type}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{pf_auth0_token_client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{pf_auth0_token_client_secret}}",
							"type": "text"
						}
					]
				},
				"url": "{{pf_auth0_token_url}}"
			},
			"response": []
		},
		{
			"name": "Course fields from PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"Course price\", jsonData.data.courses.result[0].price);\r",
							"pm.environment.set(\"Course Name\", jsonData.data.courses.result[0].paper.body.shortName + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].level.shortName + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].paper.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].region.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].courseType.description + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].sitting.name);\r",
							"pm.environment.set(\"Course Description\", jsonData.data.courses.result[0].paper.body.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].level.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].paper.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].region.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].courseType.description + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].sitting.name);\r",
							"pm.environment.set(\"Family\", \"Course\");\r",
							"pm.environment.set(\"Body SN\", jsonData.data.courses.result[0].paper.body.shortName);\r",
							"pm.environment.set(\"Level SN\", jsonData.data.courses.result[0].level.shortName);\r",
							"pm.environment.set(\"Paper desc\", jsonData.data.courses.result[0].paper.name);\r",
							"pm.environment.set(\"Location_region\", jsonData.data.courses.result[0].region.name);\r",
							"pm.environment.set(\"CourseType\", jsonData.data.courses.result[0].courseType.description);\r",
							"pm.environment.set(\"NumberOfSession\", jsonData.data.courses.result[0].numberOfSessions);\r",
							"pm.environment.set(\"PaperSN\", jsonData.data.courses.result[0].paper.shortName);\r",
							"pm.environment.set(\"ConfigurationType\", \"Allowed\");\r",
							"pm.environment.set(\"ConfigurationEvent\", \"Edit\");\r",
							"pm.environment.set(\"ChargeType\", \"Usage\");\r",
							"pm.environment.set(\"BillingFreq\", \"Monthly\");\r",
							"pm.environment.set(\"BillingRule\", \"a4Cg00000006VfTEAU\");\r",
							"pm.environment.set(\"RevenueRecRule\", \"a4vg0000000RPdhAAG\");\r",
							"pm.environment.set(\"TaxRule\", \"a53g0000000hg2ZAAQ\");\r",
							"pm.environment.set(\"LegalEntityCrSess\", \"a4ag0000004cZE0AAM\");\r",
							"pm.environment.set(\"LegalEntityMaterils\", \"a4ag0000004cZDzAAM\");\r",
							"pm.environment.set(\"StudyMode\", jsonData.data.courses.result[0].courseType.studyMode.name);\r",
							"pm.environment.set(\"SittingName\", jsonData.data.courses.result[0].sitting.name);\r",
							"pm.environment.set(\"LevelFN\", jsonData.data.courses.result[0].level.name);\r",
							"pm.environment.set(\"CourseVatRule\", jsonData.data.courses.result[0].courseType.vatRule.description);\r",
							"pm.environment.set(\"Vertical\", jsonData.data.courses.result[0].paper.body.vertical.name);\r",
							"if (jsonData.data.courses.result[0].status === \"Deactivated\") {\r",
							"    pm.environment.set(\"DeactivReason\", jsonData.data.courses.result[0].deactivationReason.description);\r",
							"}\r",
							"let clientsM = new Array();\r",
							"var lenC = jsonData.data.courses.result[0].clients.length;\r",
							"for (i = 0; i < lenC; i++) {\r",
							"    clientsM.push(jsonData.data.courses.result[0].clients[i].name);\r",
							"}\r",
							"pm.environment.set(\"Clients\", clientsM);\r",
							"pm.environment.set(\"ProjectFinDimCrsAndSess\", jsonData.data.courses.result[0].courseType.projectFinancialDimension.code);\r",
							"pm.environment.set(\"ProductFinDimCrsAndSess\", jsonData.data.courses.result[0].paper.body.financialDimension.code);\r",
							"pm.environment.set(\"DivisionFinDimCrsAndSess\", jsonData.data.courses.result[0].region.financialDimension.code);\r",
							"pm.environment.set(\"CostCentreFinDimCrsAndSess\", jsonData.data.courses.result[0].courseType.costCentreFinancialDimension.code);\r",
							"pm.environment.set(\"CombinationsQTY\", jsonData.data.courses.result[0].digitalContent.combinations.length);\r",
							"var CombinationsQTY = pm.environment.get(\"CombinationsQTY\");\r",
							"\r",
							"\r",
							"var matQTY = jsonData.data.courses.result[0].materials.length;\r",
							"pm.environment.set(\"matQTY\", matQTY);\r",
							"let MatDeliveryDefault = new Array();\r",
							"let PF_MatQty = new Array();\r",
							"let PF_referenceMat = new Array();\r",
							"let MatName = new Array();\r",
							"let MatDesc = new Array();\r",
							"let MaterialWeight = new Array();\r",
							"let MaterialProductCode = new Array();\r",
							"let MatPrice = new Array();\r",
							"let MaterialsExpiryDate = new Array();\r",
							"let MaterialsAvailableFromDate = new Array();\r",
							"let MaterialsProductionMethod = new Array();\r",
							"let ProjectFinDimCrsMat = new Array();\r",
							"let ProductFinDimCrsMat = new Array();\r",
							"let MaterialsFormat = new Array();\r",
							"let RRRuleforMat = new Array();\r",
							"let ISBNarray = new Array();\r",
							"let EditionArr = new Array();\r",
							"let MaterialsCost = new Array();\r",
							"\r",
							"for (i = 0; i < matQTY; i++) {\r",
							"    ProjectFinDimCrsMat.push(jsonData.data.courses.result[0].materials[i].material.materialType.financialDimension.code);\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.body == null && jsonData.data.courses.result[0].materials[i].material.paper == null) {ProductFinDimCrsMat.push(null)}\r",
							"    else if (jsonData.data.courses.result[0].materials[i].material.body == null){\r",
							"    ProductFinDimCrsMat.push(jsonData.data.courses.result[0].materials[i].material.paper.body.financialDimension.code)}\r",
							"    else {ProductFinDimCrsMat.push(jsonData.data.courses.result[0].materials[i].material.body.financialDimension.code)}\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.isDigitalMaterial == true){\r",
							"        MaterialsFormat.push(\"Digital\");\r",
							"        RRRuleforMat.push(\"a4vg0000000RPdhAAG\")\r",
							"    }\r",
							"    else {\r",
							"        MaterialsFormat.push(\"Physical\");\r",
							"        RRRuleforMat.push(\"a4vg0000000RPdgAAG\")\r",
							"    }\r",
							"    MatDesc.push(jsonData.data.courses.result[0].materials[i].material.materialType.description);\r",
							"    MaterialWeight.push(jsonData.data.courses.result[0].materials[i].material.weight);\r",
							"    MaterialProductCode.push(jsonData.data.courses.result[0].materials[i].material.productCode);\r",
							"    MatPrice.push(jsonData.data.courses.result[0].materials[i].material.price);\r",
							"    MaterialsCost.push(jsonData.data.courses.result[0].materials[i].material.cost);\r",
							"    PF_referenceMat.push(jsonData.data.courses.result[0].materials[i].material.reference);\r",
							"    PF_MatQty.push(jsonData.data.courses.result[0].materials[i].quantity);\r",
							"    MatDeliveryDefault.push(jsonData.data.courses.result[0].materials[i].deliveryDefault);\r",
							"    MaterialsExpiryDate.push(jsonData.data.courses.result[0].materials[i].material.expiryDate);\r",
							"    MaterialsAvailableFromDate.push(jsonData.data.courses.result[0].materials[i].material.availableDate);\r",
							"    ISBNarray.push(jsonData.data.courses.result[0].materials[i].material.isbn);\r",
							"    EditionArr.push(jsonData.data.courses.result[0].materials[i].material.edition);\r",
							"}\r",
							"pm.environment.set(\"MatDeliveryDefault\", MatDeliveryDefault);\r",
							"pm.environment.set(\"MaterialsCost\", MaterialsCost);\r",
							"pm.environment.set(\"MatDesc\", MatDesc);\r",
							"pm.environment.set(\"MaterialWeight\", MaterialWeight);\r",
							"pm.environment.set(\"MaterialProductCode\", MaterialProductCode);\r",
							"pm.environment.set(\"MatPrice\", MatPrice);\r",
							"pm.environment.set(\"PF_referenceMat\", PF_referenceMat);\r",
							"pm.environment.set(\"PF_MatQty\", PF_MatQty);\r",
							"pm.environment.set(\"MaterialsExpiryDate\", MaterialsExpiryDate);\r",
							"pm.environment.set(\"MaterialsAvailableFromDate\", MaterialsAvailableFromDate);\r",
							"pm.environment.set(\"MaterialsProductionMethod\", MaterialsProductionMethod);\r",
							"pm.environment.set(\"ProjectFinDimCrsMat\", ProjectFinDimCrsMat);\r",
							"pm.environment.set(\"ProductFinDimCrsMat\", ProductFinDimCrsMat);\r",
							"pm.environment.set(\"MaterialsFormat\", MaterialsFormat);\r",
							"pm.environment.set(\"RRRuleforMat\", RRRuleforMat);\r",
							"pm.environment.set(\"ISBNarray\", ISBNarray);\r",
							"pm.environment.set(\"EditionArr\", EditionArr);\r",
							"\r",
							"var MatCostTest = 0;\r",
							"for (i=0; i<matQTY; i++){\r",
							"    if(jsonData.data.courses.result[0].materials[i].material.cost != null){\r",
							"        MatCostTest += 2\r",
							"    }\r",
							"    else {MatCostTest += 0}\r",
							"}\r",
							"\r",
							"let MaterialsVatRule = new Array();\r",
							"for (i = 0; i < matQTY; i++)\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.isCourseMaterial === true){\r",
							"        MaterialsVatRule.push(jsonData.data.courses.result[0].materials[i].material.courseMaterialVatRule.description)}\r",
							"    else {MaterialsVatRule.push(jsonData.data.courses.result[0].materials[i].material.learningMediaVatRule.description)}\r",
							"pm.environment.set(\"MaterialsVatRule\", MaterialsVatRule);\r",
							"\r",
							"let MaterialType = new Array();\r",
							"var matType;\r",
							"for (i = 0; i < matQTY; i++) {\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.isInternalMaterial == true) {\r",
							"        MaterialType.push(\"BPP Learning media\");\r",
							"    }\r",
							"    else { MaterialType.push(\"External\"); }\r",
							"}\r",
							"pm.environment.set(\"MaterialType\", MaterialType);\r",
							"\r",
							"var numOfIns = jsonData.data.courses.result[0].instances.length;\r",
							"var numOfSess = jsonData.data.courses.result[0].numberOfSessions;\r",
							"var numOfMat = jsonData.data.courses.result[0].materials.length;\r",
							"let matSS = new Array();\r",
							"for (i=0; i<jsonData.data.courses.result[0].materials.length; i++){\r",
							"        matSS.push(jsonData.data.courses.result[0].materials[i].material.materialStockSites.length)};\r",
							"let sumofSS = 0;\r",
							"for (i=0; i<matSS.length; i++){\r",
							"    sumofSS += matSS[i];\r",
							"}\r",
							"var numOfStockSite = sumofSS;\r",
							"var crsShell = 30;\r",
							"if (numOfMat==0){\r",
							"    var matProdFeat = 0;}\r",
							"else {var matProdFeat = 2;}\r",
							"var sesProdFeat = 2;\r",
							"var instanceTest = 20*(numOfIns);\r",
							"var studyLoc = 7*(numOfIns);\r",
							"var countryISO = 1*(numOfIns);\r",
							"var session__cTest = 12*(numOfIns)*(numOfSess);\r",
							"var materialsTest = 26*(numOfMat);\r",
							"var matStockTest = 3*(numOfStockSite);\r",
							"var matPrice = 1*(numOfMat);\r",
							"var MatPO = 12*(numOfMat);\r",
							"var sessProduct = 28*(numOfSess);\r",
							"var sessPrice = 1*(numOfSess);\r",
							"var SessPO = 11*(numOfSess);\r",
							"var TotCrsTest = 5;\r",
							"var TotGrp = 3*(numOfIns);\r",
							"if (CombinationsQTY <= 1){\r",
							"    var TotCategory = 15;}\r",
							"else {var TotCategory = 1}\r",
							"\r",
							"var numberOftest = (crsShell + matProdFeat + sesProdFeat + instanceTest + studyLoc + countryISO + session__cTest + materialsTest + matStockTest + matPrice + MatPO + sessProduct + sessPrice + SessPO + TotCrsTest + TotGrp + TotCategory + MatCostTest);\r",
							"console.log(\"Number of tests for course:\", numberOftest)\r",
							"\r",
							"function appendIFnotNull(string){\r",
							"    if (string !== null){return \" \" + \"-\" + \" \" + string}\r",
							"    else {return ''}}  \r",
							"function SFMatName (matType, materialDesc, matBodySN, levelSN, paperName, ISNB){\r",
							"    SFGeneratedMatName = matType + (materialDesc !== matType? appendIFnotNull(materialDesc):'') + appendIFnotNull(matBodySN) + appendIFnotNull(levelSN) + appendIFnotNull(paperName) + appendIFnotNull(ISNB)\r",
							"    return SFGeneratedMatName\r",
							"}\r",
							"for (i=0; i<matQTY; i++){\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.paper !== null){\r",
							"        paperName = jsonData.data.courses.result[0].materials[i].material.paper.name;\r",
							"        matBodySN = jsonData.data.courses.result[0].materials[i].material.paper.body.shortName;\r",
							"        }\r",
							"    else if(jsonData.data.courses.result[0].materials[i].material.paper == null && jsonData.data.courses.result[0].materials[i].material.body !== null){\r",
							"        paperName = null;\r",
							"        matBodySN = jsonData.data.courses.result[0].materials[i].material.body.shortName;    }\r",
							"    else {paperName = null;\r",
							"        matBodySN = null;}\r",
							"    materialDesc = jsonData.data.courses.result[0].materials[i].material.materialType.description;\r",
							"    matType = jsonData.data.courses.result[0].materials[i].material.materialType.name;\r",
							"    if (jsonData.data.courses.result[0].materials[i].material.levels.length == 1){\r",
							"        levelSN = jsonData.data.courses.result[0].materials[i].material.levels[0].shortName;}\r",
							"    else {levelSN = null}\r",
							"    ISNB = jsonData.data.courses.result[0].materials[i].material.isbn;\r",
							"    MatName.push(SFMatName(matType, materialDesc, matBodySN, levelSN, paperName, ISNB))\r",
							"}\r",
							"pm.environment.set(\"MatName\", MatName);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\ncourses(reference: \"{{PF_reference}}\"){\r\n    pageInfo{hasMore}\r\n    result{\r\n    materials{\r\n    quantity\r\n    deliveryDefault\r\n    material{\r\n        paper{\r\n            shortName\r\n            name\r\n            body {\r\n                shortName\r\n                financialDimension{code}\r\n            }\r\n        }\r\n        body {\r\n            shortName\r\n            financialDimension{code}\r\n            }\r\n        levels {shortName}\r\n        reference\r\n        expiryDate\r\n        availableDate\r\n        price\r\n        isInternalMaterial\r\n        isCourseMaterial\r\n        expiryDate\r\n        isDigitalMaterial\r\n        isbn\r\n        edition\r\n        weight\r\n        productCode\r\n        materialStockSites {\r\n            materialReference\r\n            productionMethod\r\n            stockSite{\r\n                addressLine1\r\n                addressLine2\r\n                addressLine3\r\n                city\r\n                countryCode\r\n                createdBy\r\n                name\r\n                postcode\r\n                reference\r\n            }\r\n            stockSiteName\r\n            stockSiteReference    \r\n        }\r\n        materialType{\r\n          financialDimension {\r\n            code }\r\n          reference\r\n          name\r\n          description\r\n        }\r\n        learningMediaVatRule{\r\n          reference\r\n          code\r\n          description\r\n        }\r\n        courseMaterialVatRule{\r\n          reference\r\n          code\r\n          description\r\n        }\r\n      }\r\n        \r\n    }\r\n    reference\r\n    status\r\n    numberOfSessions\r\n    deactivationReason { description }\r\n    region {\r\n        name\r\n        financialDimension {code}\r\n        }\r\n    price\r\n    digitalContent { \r\n      reference\r\n      name\r\n      nameSuffix\r\n      combinations{\r\n      reference\r\n      paper {\r\n          name\r\n          reference\r\n          shortName}\r\n      body{\r\n          name\r\n          shortName\r\n          reference}\r\n      level{\r\n          name\r\n          shortName\r\n          reference}\r\n      sittings {\r\n        name\r\n        startDate\r\n        endDate} \r\n        }\r\n    }\r\n    courseType { \r\n        studyMode{name}\r\n        description\r\n        costCentreFinancialDimension {\r\n            code}\r\n        projectFinancialDimension {\r\n            code}\r\n        vatRule {\r\n            reference\r\n            code\r\n            description\r\n        } \r\n    }\r\n    paper {\r\n      description\r\n      shortName\r\n      name\r\n      reference\r\n      body {\r\n        vertical {name}\r\n        financialDimension {code}\r\n        name\r\n        shortName\r\n        reference\r\n      }\r\n    }\r\n    level {\r\n      name\r\n      shortName\r\n      reference\r\n    }\r\n    sitting {\r\n      name\r\n      reference\r\n      startDate\r\n      endDate\r\n    }\r\n    clients { \r\n        name\r\n    }\r\n    instances {\r\n      defaultLocation {\r\n          name\r\n          financialDimension {code}\r\n          }\r\n      defaultSessionDuration { description }\r\n      reference\r\n      status\r\n      sessions {\r\n        startDate\r\n        endDate\r\n        location {\r\n          name\r\n          address\r\n        }\r\n        timings {\r\n          sessionDate\r\n          startTime\r\n          endTime\r\n        }\r\n      }\r\n    }\r\n    }\r\n  }\r\n}"
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "Token for SF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"qa_sf_graph_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://test.salesforce.com/services/oauth2/token?grant_type=password&client_id={{SFclient_idForToken}}&client_secret={{SFclient_secretForToken}}&username={{SFusernameForToken}}&password={{SFpasswordForToken}}",
					"protocol": "https",
					"host": [
						"test",
						"salesforce",
						"com"
					],
					"path": [
						"services",
						"oauth2",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "password"
						},
						{
							"key": "client_id",
							"value": "{{SFclient_idForToken}}"
						},
						{
							"key": "client_secret",
							"value": "{{SFclient_secretForToken}}"
						},
						{
							"key": "username",
							"value": "{{SFusernameForToken}}"
						},
						{
							"key": "password",
							"value": "{{SFpasswordForToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find SF course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"SF_course_id\", jsonData.records[0].Id);",
							"var SF_course_id = pm.environment.get(\"SF_course_id\");",
							"console.log(\"Salesforce Course Id:\", SF_course_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Product2\nwhere  BPP_ProductFactoryID__c ='{{PF_reference}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Product2\nwhere  BPP_ProductFactoryID__c ='{{PF_reference}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Course fields in SF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var BillingFreq = pm.environment.get(\"BillingFreq\");\r",
							"var BillingRule = pm.environment.get(\"BillingRule\");\r",
							"var RevenueRecRule = pm.environment.get(\"RevenueRecRule\");\r",
							"var TaxRule = pm.environment.get(\"TaxRule\");\r",
							"var ChargeType = pm.environment.get(\"ChargeType\");\r",
							"var courseName = pm.environment.get(\"Course Name\");\r",
							"var courseFamily = pm.environment.get(\"Family\");\r",
							"var qualification = pm.environment.get(\"Body SN\");\r",
							"var levelPQ = pm.environment.get(\"Level SN\");\r",
							"var PaperC = pm.environment.get(\"Paper desc\");\r",
							"var Location_PQ = pm.environment.get(\"Location_region\");\r",
							"var Desc = pm.environment.get(\"Course Description\");\r",
							"var ConfigurationType = pm.environment.get(\"ConfigurationType\");\r",
							"var ConfigurationEvent = pm.environment.get(\"ConfigurationEvent\"); \r",
							"var PF_id = pm.environment.get(\"PF_reference\"); \r",
							"var DeactivReason = pm.environment.get(\"DeactivReason\");\r",
							"var CourseType = pm.environment.get(\"CourseType\");\r",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\"); \r",
							"var SittingName = pm.environment.get(\"SittingName\");\r",
							"var CourseVatRule = pm.environment.get(\"CourseVatRule\");\r",
							"var ProjectFinDim = pm.environment.get(\"ProjectFinDimCrsAndSess\");\r",
							"var ProductFinDim = pm.environment.get(\"ProductFinDimCrsAndSess\");\r",
							"var DivisionFinDim = pm.environment.get(\"DivisionFinDimCrsAndSess\");\r",
							"var CostCentreFinDim = pm.environment.get(\"CostCentreFinDimCrsAndSess\");\r",
							"var LegalEntityCrSess = pm.environment.get(\"LegalEntityCrSess\");\r",
							"var Vertical = pm.environment.get(\"Vertical\");\r",
							"let clienttag = pm.environment.get(\"Clients\");\r",
							"\r",
							"pm.test(\"Course Legal entity match\", function () {\r",
							"    pm.expect(jsonData.BPP_Legal_Entity__c).to.eql(LegalEntityCrSess);\r",
							"   });\r",
							"console.log(\"Legal entity from PF (hardcoded, LEM for materials; PED for everything else):\", LegalEntityCrSess);\r",
							"console.log(\"Legal entity in SF:\", jsonData.BPP_Legal_Entity__c);\r",
							"\r",
							"pm.test(\"Course Vertical match\", function () {\r",
							"    pm.expect(jsonData.Vertical__c).to.eql(Vertical);\r",
							"   });\r",
							"console.log(\"Course Vertical from PF:\", Vertical);\r",
							"console.log(\"Course Vertical in SF:\", jsonData.Vertical__c);  \r",
							"\r",
							"pm.test(\"Course Cost Centre Financial Dimensions match\", function () {\r",
							"    pm.expect(jsonData.Cost_Centre_Financial_Dimension__c).to.eql(CostCentreFinDim);\r",
							"   });\r",
							"console.log(\"Course Cost Centre Financial Dimensions from PF (taken from course Course Type in PF) :\", CostCentreFinDim);\r",
							"console.log(\"Course Cost Centre Financial Dimensions in SF:\", jsonData.Cost_Centre_Financial_Dimension__c); \r",
							"\r",
							"pm.test(\"Course Division Financial Dimensions match\", function () {\r",
							"    pm.expect(jsonData.Division_Financial_Dimension__c).to.eql(DivisionFinDim);\r",
							"   });\r",
							"console.log(\"Course Division Financial Dimensions from PF (taken from course Region in PF):\", DivisionFinDim);\r",
							"console.log(\"Course Division Financial Dimensions in SF:\", jsonData.Division_Financial_Dimension__c); \r",
							"\r",
							"pm.test(\"Course Product Financial Dimensions match\", function () {\r",
							"    pm.expect(jsonData.Product_Financial_Dimension__c).to.eql(ProductFinDim);\r",
							"   });\r",
							"console.log(\"Course Product Financial Dimensions from PF (taken from course Body in PF):\", ProductFinDim);\r",
							"console.log(\"Course Product Financial Dimensions in SF:\", jsonData.Product_Financial_Dimension__c); \r",
							"\r",
							"pm.test(\"Course Project Financial Dimensions match\", function () {\r",
							"    pm.expect(jsonData.Project_Financial_Dimension__c).to.eql(ProjectFinDim);\r",
							"   });\r",
							"console.log(\"Course Project Financial Dimensions from PF (taken from course Course Type in PF):\", ProjectFinDim);\r",
							"console.log(\"Course Project Financial Dimensions in SF:\", jsonData.Project_Financial_Dimension__c);   \r",
							"\r",
							"pm.test(\"Course name match\", function () {\r",
							"    pm.expect(jsonData.Name).to.eql(courseName);\r",
							"   });\r",
							"console.log(\"Course name from PF (genareted by middleware rules):\", courseName);\r",
							"console.log(\"Course name in SF:\", jsonData.Name);   \r",
							"if (jsonData.IsActive === true){\r",
							"    pm.test(\"IsActive true\", function () {\r",
							"        pm.expect(jsonData.IsActive).to.be.true;\r",
							"    });\r",
							"    console.log(\"Course Active in PF\");\r",
							"    console.log(\"Course Active in SF\");\r",
							"}\r",
							"else {pm.test(\"Inactive deactivation reason\", function () {\r",
							"        pm.expect(jsonData.Deactivation_Reason__c).to.be.eql(DeactivReason);\r",
							"    });\r",
							"    console.log(\"Course Inactive, deactivation reason from PF:\", DeactivReason);\r",
							"    console.log(\"Deactivation reason in SF:\", jsonData.Deactivation_Reason__c);\r",
							"}\r",
							"\r",
							"pm.test(\"Family test\", function () {\r",
							"    pm.expect(jsonData.Family__c).to.eql(courseFamily);\r",
							"   });\r",
							"console.log(\"Product Family (hardcoded on middleware to 'Course') in SF:\", jsonData.Family__c);\r",
							"\r",
							"pm.test(\"Qualification test\", function () {\r",
							"    pm.expect(jsonData.Qualification__c).to.eql(qualification);\r",
							"   });\r",
							"console.log(\"Qualification from PF (Course Body):\", qualification);\r",
							"console.log(\"Qualification in SF:\", jsonData.Qualification__c);\r",
							"\r",
							"pm.test(\"Level_PQ test\", function () {\r",
							"    pm.expect(jsonData.Level_PQ__c).to.eql(levelPQ);\r",
							"   });\r",
							"console.log(\"Course Level from PF:\", levelPQ);\r",
							"console.log(\"Course Level in SF:\", jsonData.Level_PQ__c);   \r",
							"\r",
							"pm.test(\"Paper test\", function () {\r",
							"    pm.expect(jsonData.Paper__c).to.eql(PaperC);\r",
							"   });\r",
							"console.log(\"Course Paper from PF:\", PaperC);\r",
							"console.log(\"Course Paper in SF:\", jsonData.Paper__c);   \r",
							"\r",
							"pm.test(\"Location test\", function () {\r",
							"    pm.expect(jsonData.Location_PQ__c).to.eql(Location_PQ);\r",
							"   });\r",
							"console.log(\"Course Location from PF:\", Location_PQ);\r",
							"console.log(\"Course Location in SF:\", jsonData.Location_PQ__c); \r",
							"\r",
							"pm.test(\"Description test\", function () {\r",
							"    pm.expect(jsonData.Description).to.eql(Desc);\r",
							"   });\r",
							"console.log(\"Course Description genareted by middleware rules from PF:\", Desc);\r",
							"console.log(\"Course Description in SF:\", jsonData.Description);   \r",
							"\r",
							"pm.test(\"QuantityEditable test\", function () {\r",
							"     pm.expect(jsonData.SBQQ__QuantityEditable__c).to.be.true;\r",
							"   });\r",
							"console.log(\"QuantityEditable (hardcoded on middleware - always 'True' for Course) in SF:\", jsonData.SBQQ__QuantityEditable__c);  \r",
							"\r",
							"pm.test(\"PriceEditable test\", function () {\r",
							"     pm.expect(jsonData.SBQQ__PriceEditable__c).to.be.true;\r",
							"   });\r",
							"console.log(\"PriceEditable (hardcoded on middleware - always 'True' for Course) in SF:\", jsonData.SBQQ__PriceEditable__c); \r",
							"\r",
							"pm.test(\"Vat Rule description test\", function () {\r",
							"     pm.expect(jsonData.BPP_Product_Tax_Category__c).to.eql(CourseVatRule);\r",
							"   });\r",
							"console.log(\"Course Vat Rule from PF (taken from course Course Type):\", CourseVatRule);\r",
							"console.log(\"Course Vat Rule in SF:\", jsonData.BPP_Product_Tax_Category__c);  \r",
							"\r",
							"pm.test(\"NonDiscountable test\", function () {\r",
							"     pm.expect(jsonData.SBQQ__NonDiscountable__c).to.be.false;\r",
							"   });\r",
							"console.log(\"NonDiscountable (hardcoded on middleware - always 'False' for Course) in SF:\", jsonData.SBQQ__NonDiscountable__c);\r",
							"\r",
							"pm.test(\"ConfigurationType test\", function () {\r",
							"    pm.expect(jsonData.SBQQ__ConfigurationType__c).to.eql(ConfigurationType);\r",
							"   });\r",
							"console.log(\"ConfigurationType (hardcoded on middleware - always 'Allowed' for Course) in SF:\", jsonData.SBQQ__ConfigurationType__c); \r",
							"\r",
							"pm.test(\"Sitting name test\", function () {\r",
							"    pm.expect(jsonData.Sitting__c).to.eql(SittingName);\r",
							"   });\r",
							"console.log(\"Course Sitting from PF:\", SittingName);\r",
							"console.log(\"Course Sitting in SF:\", jsonData.Sitting__c);\r",
							"\r",
							"pm.test(\"ConfigurationEvent test\", function () {\r",
							"    pm.expect(jsonData.SBQQ__ConfigurationEvent__c).to.eql(ConfigurationEvent);\r",
							"   });\r",
							"console.log(\"ConfigurationEvent (hardcoded on middleware - always 'Edit' for Course) in SF:\", jsonData.SBQQ__ConfigurationEvent__c); \r",
							"\r",
							"pm.test(\"PF reference test\", function () {\r",
							"    pm.expect(jsonData.BPP_ProductFactoryID__c).to.eql(PF_id);\r",
							"   });\r",
							"console.log(\"Course reference from PF:\", PF_id);\r",
							"console.log(\"Course PF reference in SF:\", jsonData.BPP_ProductFactoryID__c);  \r",
							"\r",
							"pm.test(\"ChargeType test\", function () {\r",
							"    pm.expect(jsonData.SBQQ__ChargeType__c).to.eql(ChargeType);\r",
							"   });\r",
							"console.log(\"ChargeType (hardcoded on middleware - always 'Usage' for Course) in SF:\", jsonData.SBQQ__ChargeType__c);  \r",
							"\r",
							"pm.test(\"Teaching days test\", function () {\r",
							"    pm.expect(jsonData.Teaching_Days__c).to.eql(+NumberOfSession);\r",
							"   });\r",
							"console.log(\"Teaching days (number of sessions) from PF:\", NumberOfSession);\r",
							"console.log(\"Teaching days in SF:\", jsonData.Teaching_Days__c); \r",
							"\r",
							"pm.test(\"Course Type\", function () {\r",
							"    pm.expect(jsonData.Course_Type__c).to.eql(CourseType);\r",
							"   });\r",
							"console.log(\"Course Type from PF:\", CourseType);\r",
							"console.log(\"CourseType in SF:\", jsonData.Course_Type__c);\r",
							"var ClientsVF ='';\r",
							"if (clienttag.length === 0){\r",
							"    pm.test(\"Clients tag test\", function () {\r",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(null);\r",
							"    });\r",
							"    console.log(\"No specific Clients for current course\");\r",
							"}\r",
							"else{\r",
							"    var i;\r",
							"    var lengC = \"\";\r",
							"    for (i=0; i<clienttag.length; i++){\r",
							"    lengC += clienttag[i];\r",
							"    lengC += \", \";\r",
							"    ClientsVF = lengC.slice(0,-2);\r",
							"    }\r",
							"    pm.test(\"Clients tag test\", function () {\r",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(ClientsVF);\r",
							"    });\r",
							"    console.log(\"Clients from PF:\", ClientsVF);\r",
							"    console.log(\"Clients in SF:\", jsonData.Client_Tags__c);\r",
							"}\r",
							"\r",
							"pm.test(\"Billing Frequency Match\", function () {\r",
							"    pm.expect(jsonData.SBQQ__BillingFrequency__c).to.eql(BillingFreq);\r",
							"   });\r",
							"console.log(\"Billing Frequency (hardcoded on middleware - always 'Monthly' for Course) in SF:\", jsonData.SBQQ__BillingFrequency__c);   \r",
							"\r",
							"pm.test(\"Billing Rule Match\", function () {\r",
							"    pm.expect(jsonData.blng__BillingRule__c).to.eql(BillingRule);\r",
							"   });\r",
							"console.log(\"Billing Rule (hardcoded on middleware - always 'Combined Billing Rule - Generate Invoice - Combined Partials' for Course) in SF:\", jsonData.blng__BillingRule__c);  \r",
							"\r",
							"pm.test(\"Revenue recognition Rule match\", function () {\r",
							"    pm.expect(jsonData.blng__RevenueRecognitionRule__c).to.eql(RevenueRecRule);\r",
							"   });\r",
							"console.log(\"Revenue recognition Rule (hardcoded on middleware - always 'Full One Off Rec' for Course) in SF:\", jsonData.blng__RevenueRecognitionRule__c); \r",
							"\r",
							"pm.test(\"Tax Rule match\", function () {\r",
							"    pm.expect(jsonData.blng__TaxRule__c).to.eql(TaxRule);\r",
							"   });\r",
							"console.log(\"Tax Rule (hardcoded on middleware - always 'Domestic Business - UK Classroom Courses' for Course) in SF:\", jsonData.blng__TaxRule__c);  \r",
							"\r",
							"pm.environment.unset(\"ProdSessIn\");\r",
							"pm.environment.set(\"ProdSessIn\", 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Product2/{{SF_course_id}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find P_feature M",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var qty = pm.environment.get(\"matQTY\");",
							"if (qty > 0){",
							"    var SF_P_feature_id_M = jsonData.records[0].Id;",
							"    pm.environment.set(\"SF_P_feature_id_M\", SF_P_feature_id_M);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var qty = pm.environment.get(\"matQTY\");",
							"if (qty < 1){",
							"   postman.setNextRequest('SoQL to find P_feature S');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, name\nFrom SBQQ__ProductFeature__c\nwhere SBQQ__ConfiguredSKU__c ='{{SF_course_id}}' and  Name='{{Body SN}} - Materials'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, name\nFrom SBQQ__ProductFeature__c\nwhere SBQQ__ConfiguredSKU__c ='{{SF_course_id}}' and  Name='{{Body SN}} - Materials'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find ProdOptM for SBQQnum",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"let tempSBQQ = new Array();",
							"var matQTY = pm.environment.get(\"matQTY\"); ",
							"var MatName = pm.environment.get(\"MatName\");",
							"var SessQTY = pm.environment.get(\"NumberOfSession\");",
							"if (matQTY > 0){",
							"    for (i=0; i < matQTY; i++) {",
							"    tempSBQQ.push(MatName.indexOf(jsonData.records[i].SBQQ__ProductName__c));",
							"    }",
							"    let SBQQnum = new Array();",
							"    for (i=0; i<tempSBQQ.length; i++){",
							"        var temp = (i + 1 + SessQTY)*10;",
							"        SBQQnum.push(temp);",
							"    }",
							"    pm.environment.set(\"SBQQnum\", SBQQnum);}",
							"else { postman.setNextRequest('data for session__c v2.0');}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, SBQQ__ProductName__c\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}' and SBQQ__ProductFamily__c='Materials'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, SBQQ__ProductName__c\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}' and SBQQ__ProductFamily__c='Materials'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "P_feature M fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Feature number match\", function () {",
							"    pm.expect(jsonData.SBQQ__Number__c).to.eql(10);",
							"   });",
							"console.log(\"Feature number (hardcoded on Middleware to '10') in SF:\", jsonData.SBQQ__Number__c)",
							"",
							"pm.test(\"MinOptionCount match\", function () {",
							"    pm.expect(jsonData.SBQQ__MinOptionCount__c).to.eql(0);",
							"   });",
							"console.log(\"MinOptionCount (hardcoded on Middleware to '0') in SF:\", jsonData.SBQQ__MinOptionCount__c)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/SBQQ__ProductFeature__c/{{SF_P_feature_id_M}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find P_feature S",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"SF_P_feature_id_S\", jsonData.records[0].Id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, name\nFrom SBQQ__ProductFeature__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}'  and Name = '{{Body SN}} - Session'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, name\nFrom SBQQ__ProductFeature__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}'  and Name = '{{Body SN}} - Session'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "P_feature S fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Feature number match\", function () {",
							"    pm.expect(jsonData.SBQQ__Number__c).to.eql(10);",
							"   });",
							"console.log(\"Feature number (hardcoded on Middleware to '10') in SF:\", jsonData.SBQQ__Number__c)",
							"",
							"pm.test(\"MinOptionCount match\", function () {",
							"    pm.expect(jsonData.SBQQ__MinOptionCount__c).to.eql(0);",
							"   });",
							"console.log(\"MinOptionCount (hardcoded on Middleware to '0') in SF:\", jsonData.SBQQ__MinOptionCount__c)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/SBQQ__ProductFeature__c/{{SF_P_feature_id_S}}"
			},
			"response": []
		},
		{
			"name": "Course fields from PF Instance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"function isEmptyCheck (p1){\r",
							"    if (p1 === null || p1 === ''){return null}\r",
							"    return p1\r",
							"}\r",
							"pm.environment.set(\"arr\", jsonData.data.courses.result[0].instances.length);\r",
							"var arr = pm.environment.get(\"arr\");\r",
							"let refM = new Array();\r",
							"let capacityM = new Array();\r",
							"let sdM = new Array();\r",
							"let locationM = new Array();\r",
							"let streamM = new Array();\r",
							"let deactivationResIn = new Array();\r",
							"let FirstAddressLine = new Array();\r",
							"let SecondAddressLine = new Array();\r",
							"let ThirdAddressLine = new Array();\r",
							"let CountryCode = new Array();\r",
							"let CityName = new Array();\r",
							"let PostCode = new Array();\r",
							"let FinDimLocation = new Array();\r",
							"let InstanceStatus = new Array();\r",
							"var i;\r",
							"for (i = 0; i < arr; i++) {\r",
							"    FinDimLocation.push(jsonData.data.courses.result[0].instances[i].defaultLocation.financialDimension.code)\r",
							"    FirstAddressLine.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.addressLine1));\r",
							"    SecondAddressLine.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.addressLine2));\r",
							"    ThirdAddressLine.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.addressLine3));\r",
							"    CountryCode.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.countryCode));\r",
							"    CityName.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.city));\r",
							"    PostCode.push(isEmptyCheck(jsonData.data.courses.result[0].instances[i].defaultLocation.postcode));\r",
							"    refM.push(jsonData.data.courses.result[0].instances[i].reference);\r",
							"    capacityM.push(jsonData.data.courses.result[0].instances[i].capacity);\r",
							"    sdM.push(jsonData.data.courses.result[0].instances[i].defaultSessionDuration.description);\r",
							"    locationM.push(jsonData.data.courses.result[0].instances[i].defaultLocation.name);\r",
							"    InstanceStatus.push(jsonData.data.courses.result[0].instances[i].status);\r",
							"    if (jsonData.data.courses.result[0].instances[i].stream === null){\r",
							"    streamM.push(null)}\r",
							"    else {streamM.push(jsonData.data.courses.result[0].instances[i].stream.name)};\r",
							"    if (jsonData.data.courses.result[0].instances[i].status === \"Active\") {\r",
							"        deactivationResIn.push(null);\r",
							"    }\r",
							"    else {\r",
							"        deactivationResIn.push(jsonData.data.courses.result[0].instances[i].deactivationReason.description);\r",
							"    }\r",
							"}\r",
							"pm.environment.set(\"deactivationResIn\", deactivationResIn);\r",
							"pm.environment.set(\"InstanceStatus\", InstanceStatus);\r",
							"pm.environment.set(\"refM\", refM);\r",
							"pm.environment.set(\"capacityM\", capacityM);\r",
							"pm.environment.set(\"sdM\", sdM);\r",
							"pm.environment.set(\"locationM\", locationM);\r",
							"pm.environment.set(\"streamM\", streamM);\r",
							"pm.environment.set(\"FirstAddressLine\", FirstAddressLine);\r",
							"pm.environment.set(\"SecondAddressLine\", SecondAddressLine);\r",
							"pm.environment.set(\"ThirdAddressLine\", ThirdAddressLine);\r",
							"pm.environment.set(\"CountryCode\", CountryCode);\r",
							"pm.environment.set(\"CityName\", CityName);\r",
							"pm.environment.set(\"PostCode\", PostCode);\r",
							"pm.environment.set(\"FinDimLocation\", FinDimLocation);\r",
							"var lowerDates = new Array();\r",
							"var t = jsonData.data.courses.result[0].instances[0].sessions.length;\r",
							"for (j = 0; j < arr; j++) {\r",
							"    var dates = new Array();\r",
							"    for (i = 0; i < t; i++) {\r",
							"        dates.push(jsonData.data.courses.result[0].instances[j].sessions[i].startDate);\r",
							"    }\r",
							"    var lowerDate = dates[(t - 1)];\r",
							"    for (i = 0; i < t; i++) {\r",
							"        if (lowerDate > dates[i]) { lowerDate = dates[i] }\r",
							"    }\r",
							"    lowerDates.push(lowerDate);\r",
							"}\r",
							"pm.environment.set(\"StartDate\", lowerDates);\r",
							"var latestDates = new Array();\r",
							"for (j = 0; j < arr; j++) {\r",
							"    var dates = new Array();\r",
							"    for (i = 0; i < t; i++) {\r",
							"        dates.push(jsonData.data.courses.result[0].instances[j].sessions[i].endDate);\r",
							"    }\r",
							"    var latestDate = dates[(t - 1)];\r",
							"    for (i = 0; i < t; i++) {\r",
							"        if (latestDate < dates[i]) { latestDate = dates[i] }\r",
							"    }\r",
							"    latestDates.push(latestDate);\r",
							"}\r",
							"pm.environment.set(\"EndDate\", latestDates);\r",
							"pm.environment.unset(\"matIn\");\r",
							"pm.environment.set(\"matIn\", 0);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n\r\n  courses(reference: \"{{PF_reference}}\"){\r\n    result{\r\n    instances {\r\n      capacity\r\n      stream {name}\r\n      status\r\n      defaultLocation { \r\n          financialDimension {code}\r\n          name\r\n          reference\r\n          addressLine1\r\n          addressLine2\r\n          addressLine3\r\n          countryCode\r\n          city\r\n          postcode\r\n          region {name}\r\n          }\r\n      defaultSessionDuration { \r\n          description\r\n      }\r\n      reference\r\n      status\r\n      deactivationReason {description}\r\n      sessions {\r\n        reference\r\n        startDate\r\n        endDate\r\n        location {\r\n          name\r\n          address\r\n        }\r\n        timings {\r\n          reference\r\n          sessionDate\r\n          startTime\r\n          endTime\r\n        }\r\n      }\r\n    }\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "SoQL to find Instance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var arr = pm.environment.get(\"arr\"); ",
							"var i;",
							"let refindex = new Array();",
							"var instanceRef = pm.environment.get(\"refM\");",
							"for (i=0; i<arr; i++){",
							"var x = instanceRef.indexOf(jsonData.records[i].Instance_ID__c);",
							"    refindex.push(x);",
							"}",
							"let SFIid = new Array();",
							"for (i=0; i<arr; i++){",
							"    SFIid.push(jsonData.records[i].Id);",
							"}",
							"pm.environment.set(\"SFIidM\", SFIid);",
							"pm.environment.set(\"refindex\", refindex);",
							"pm.environment.set(\"startIndex\", 0);",
							"",
							"pm.environment.unset(\"g\");",
							"pm.environment.set(\"g\", 0);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, Instance_ID__c\nFrom Instance__c\nwhere  Product__c = '{{SF_course_id}}' ",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, Instance_ID__c\nFrom Instance__c\nwhere  Product__c = '{{SF_course_id}}' "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SF Instance test v2.0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var g = pm.environment.get(\"g\");",
							"var arr = pm.environment.get(\"arr\");",
							"if (g < arr){",
							"    var SFIid = pm.environment.get(\"SFIidM\");",
							"    var refindex = pm.environment.get(\"refindex\");",
							"    var x = refindex[g];",
							"    var InstanceID = SFIid[g];",
							"    pm.environment.unset(\"InstanceID\");",
							"    pm.environment.set(\"InstanceID\", InstanceID);",
							"    pm.environment.unset(\"index\");",
							"    pm.environment.set(\"index\", x);",
							"    var t = +g + 1;",
							"    pm.environment.unset(\"g\");",
							"    pm.environment.set(\"g\", t);",
							"}",
							"else {",
							"    postman.setNextRequest('SoQL to find Materials v2.0');",
							"    console.log(\"That's all, folks!\");",
							"   }"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var locationM = pm.environment.get(\"locationM\");",
							"var refM = pm.environment.get(\"refM\");",
							"var capacityM = pm.environment.get(\"capacityM\");",
							"var sdM = pm.environment.get(\"sdM\");",
							"var index = pm.environment.get(\"index\");",
							"var StartDate = pm.environment.get(\"StartDate\");",
							"var EndDate = pm.environment.get(\"EndDate\");",
							"var SittingName = pm.environment.get(\"SittingName\");",
							"var deactivationResIn = pm.environment.get(\"deactivationResIn\");",
							"var stream = pm.environment.get(\"streamM\");",
							"var CourseType = pm.environment.get(\"CourseType\");",
							"var PaperSN = pm.environment.get(\"PaperSN\");",
							"var StudyLocationId = jsonData.Study_Location__c;",
							"pm.environment.set(\"StudyLocationId\", StudyLocationId);",
							"var FinDimLocation = pm.environment.get(\"FinDimLocation\");",
							"var StudyMode = pm.environment.get(\"StudyMode\");",
							"var InstanceStatus = pm.environment.get(\"InstanceStatus\");",
							"",
							"pm.test(\"Study Mode match\", function() {",
							"    pm.expect(jsonData.Study_Mode__c).to.eql(StudyMode);",
							"});",
							"console.log(\"Study Mode from PF:\", StudyMode)",
							"console.log(\"Study Mode in SF:\", jsonData.Study_Mode__c)",
							"",
							"pm.test(\"Instance Status match\", function() {",
							"    pm.expect(jsonData.BPP_Instance_Status__c).to.eql(InstanceStatus[index]);",
							"});",
							"console.log(\"Instance status in PF:\", InstanceStatus[index])",
							"console.log(\"Instance status in SF:\", jsonData.BPP_Instance_Status__c)",
							"",
							"pm.test(\"Deactivation reason match\", function() {",
							"    pm.expect(jsonData.Deactivation_Reason__c).to.eql(deactivationResIn[index]);",
							"});",
							"console.log(\"Deactivation reason from PF:\", deactivationResIn[index])",
							"console.log(\"Deactivation reason in SF:\", jsonData.Deactivation_Reason__c)",
							"",
							"pm.test(\"reference match\", function() {",
							"    pm.expect(jsonData.Instance_ID__c).to.eql(refM[index]);",
							"});",
							"console.log(\"PF Instance reference from PF:\", refM[index])",
							"console.log(\"PF Instance reference in SF:\", jsonData.Instance_ID__c)",
							"",
							"pm.test(\"capacity match\", function() {",
							"    pm.expect(jsonData.Instance_Capacity__c).to.eql(capacityM[index]);",
							"});",
							"console.log(\"Instance capacity from PF:\", capacityM[index])",
							"console.log(\"Instance capacity in SF:\", jsonData.Instance_Capacity__c)",
							"",
							"pm.test(\"sessionDuration match\", function() {",
							"    pm.expect(jsonData.Session_Duration__c).to.eql(sdM[index]);",
							"});",
							"console.log(\"Instance session duration from PF:\", sdM[index])",
							"console.log(\"Instance session duration in SF:\", jsonData.Session_Duration__c)",
							"",
							"pm.test(\"Instance location match\", function() {",
							"    pm.expect(jsonData.Location__c).to.eql(locationM[index]);",
							"});",
							"console.log(\"Instance location from PF:\", locationM[index])",
							"console.log(\"Instance location in SF:\", jsonData.Location__c)",
							"",
							"pm.test(\"Instance startdate match\", function() {",
							"    pm.expect(jsonData.Start_Date__c).to.eql(StartDate[index]);",
							"});",
							"console.log(\"Instance Start Date from PF:\", StartDate[index])",
							"console.log(\"Instance Start Date in SF:\", jsonData.Start_Date__c)",
							"",
							"pm.test(\"Instance End Date match\", function() {",
							"    pm.expect(jsonData.End_Date__c).to.eql(EndDate[index]);",
							"});",
							"console.log(\"Instance End Date from PF:\", EndDate[index])",
							"console.log(\"Instance End Date in SF:\", jsonData.End_Date__c)",
							"",
							"pm.test(\"Sitting match\", function() {",
							"    pm.expect(jsonData.Sitting__c).to.eql(SittingName);",
							"});",
							"console.log(\"Sitting from PF:\", SittingName)",
							"console.log(\"Sitting in SF:\", jsonData.Sitting__c)",
							"",
							"pm.test(\"Stream match\", function() {",
							"    pm.expect(jsonData.Stream__c).to.eql(stream[index]);",
							"});",
							"console.log(\"Stream from PF:\", stream[index])",
							"console.log(\"Stream in SF:\", jsonData.Stream__c)",
							"",
							"pm.test(\"Instance Financial Dimensions match\", function() {",
							"    pm.expect(jsonData.Location_Financial_Dimension__c).to.eql(FinDimLocation[index]);",
							"});",
							"console.log(\"Instance Financial Dimensions from PF:\", FinDimLocation[index])",
							"console.log(\"Instance Financial Dimensions in SF:\", jsonData.Location_Financial_Dimension__c)",
							"",
							"pm.test(\"Course type Instance related to match\", function(){",
							"    pm.expect(jsonData.Course_Type__c).to.eql(CourseType)",
							"});",
							"console.log(\"Course type Instance related to from PF:\", CourseType)",
							"console.log(\"Course type Instance related to in SF:\", jsonData.Course_Type__c)",
							"",
							"var clientTag = pm.environment.get(\"Clients\");",
							"if (clientTag.length === 0){",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(null);",
							"    });",
							"    console.log(\"No specific client for this course/instance\")",
							"}",
							"else {",
							"    var i;",
							"    var ClientStr = \"\";",
							"        for (i=0; i<clientTag.length; i++){",
							"        ClientStr += clientTag[i];",
							"        ClientStr += \", \";",
							"        }",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(ClientStr.slice(0,-2));",
							"    });",
							"    console.log(\"Clients from PF:\", jsonData.Client_Tags__c)",
							"    console.log(\"Clients in SF:\", ClientStr.slice(0,-2))",
							"}",
							"",
							"var xxx = StartDate[index];",
							"var moment = require('moment');",
							"var yyy = moment(xxx).format(\"DD/MM/YYYY\");",
							"var BodySN = pm.environment.get(\"Body SN\");",
							"var LevelFN = pm.environment.get(\"LevelFN\");",
							"var LevelSN = pm.environment.get(\"Level SN\");",
							"var Paperdesc = pm.environment.get(\"Paper desc\");",
							"var Location_region = pm.environment.get(\"Location_region\");",
							"if (stream[index] != null) {pm.test(\"Instance name match\", function() {",
							"    pm.expect(jsonData.Instance_Name__c).to.eql(BodySN + \" \" + \"-\" + \" \" + LevelFN + \" \" + \"-\" + \" \" + Paperdesc + \" \" + \"-\" + \" \" + Location_region + \" \" + \"-\" + \" \" + sdM[index] + \" \" + \"-\" + \" \" + yyy + \" \" + \"-\" + \" \" + stream[index]);",
							"    });",
							"    console.log(\"Instance name generated from PF data:\", (BodySN + \" \" + \"-\" + \" \" + LevelFN + \" \" + \"-\" + \" \" + Paperdesc + \" \" + \"-\" + \" \" + Location_region + \" \" + \"-\" + \" \" + sdM[index] + \" \" + \"-\" + \" \" + yyy + \" \" + \"-\" + \" \" + stream[index]))",
							"    console.log(\"Instance name in SF:\", jsonData.Instance_Name__c)",
							"    }",
							"else {pm.test(\"Instance name match\", function() {",
							"    pm.expect(jsonData.Instance_Name__c).to.eql(BodySN + \" \" + \"-\" + \" \" + LevelFN + \" \" + \"-\" + \" \" + Paperdesc + \" \" + \"-\" + \" \" + Location_region + \" \" + \"-\" + \" \" + sdM[index] + \" \" + \"-\" + \" \" + yyy);",
							"    });",
							"    console.log(\"Instance name generated from PF:\", (BodySN + \" \" + \"-\" + \" \" + LevelFN + \" \" + \"-\" + \" \" + Paperdesc + \" \" + \"-\" + \" \" + Location_region + \" \" + \"-\" + \" \" + sdM[index] + \" \" + \"-\" + \" \" + yyy))",
							"    console.log(\"Instance name in SF:\", jsonData.Instance_Name__c)",
							"    }",
							"",
							"pm.test(\"Qualification Instance match\", function(){",
							"    pm.expect(jsonData.Qualification__c).to.eql(BodySN)",
							"});",
							"console.log(\"Instance Qualification from PF (course body):\", BodySN)",
							"console.log(\"Instance Qualification in SF:\", jsonData.Qualification__c)",
							"",
							"pm.test(\"Level Instance match\", function(){",
							"    pm.expect(jsonData.Level__c).to.eql(LevelSN)",
							"});",
							"console.log(\"Instance Level from PF:\", LevelSN)",
							"console.log(\"Instance Level in SF:\", jsonData.Level__c)",
							"",
							"pm.test(\"Paper Instance match\", function(){",
							"    pm.expect(jsonData.Paper__c).to.eql(Paperdesc)",
							"});",
							"console.log(\"Instance Paper from PF:\", Paperdesc)",
							"console.log(\"Instance Paper in SF:\", jsonData.Paper__c)",
							"",
							"pm.test(\"Region Instance match\", function(){",
							"    pm.expect(jsonData.Region__c).to.eql(Location_region)",
							"});",
							"console.log(\"Region Instance from PF:\", Location_region)",
							"console.log(\"Region Instance in SF:\", jsonData.Region__c)",
							"",
							"pm.test(\"Paper short name match\", function(){",
							"    pm.expect(jsonData.Paper_Short_Name__c).to.eql(PaperSN)",
							"});",
							"console.log(\"Paper short on Instance from PF:\", PaperSN)",
							"console.log(\"Paper short on Instance in SF:\", jsonData.Paper_Short_Name__c)",
							"",
							"pm.environment.set(\"InstanceReferenceforGraph\", jsonData.Instance_ID__c);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/Instance__c/{{InstanceID}}"
			},
			"response": []
		},
		{
			"name": "Study Location object test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var CountrySFid = jsonData.Country__c;\r",
							"pm.environment.set(\"CountrySFid\", CountrySFid);\r",
							"var FirstAddressLine = pm.environment.get(\"FirstAddressLine\");\r",
							"var SecondAddressLine = pm.environment.get(\"SecondAddressLine\");\r",
							"var ThirdAddressLine = pm.environment.get(\"ThirdAddressLine\");\r",
							"var CityName = pm.environment.get(\"CityName\");\r",
							"var PostCode = pm.environment.get(\"PostCode\");\r",
							"var index = pm.environment.get(\"index\");\r",
							"var locationM = pm.environment.get(\"locationM\");\r",
							"pm.test(\"Is Active\", function() {\r",
							"    pm.expect(jsonData.Active__c).to.be.true;\r",
							"});\r",
							"console.log(\"Study Location is Active in SF:\", jsonData.Active__c)\r",
							"\r",
							"pm.test(\"First Address Line match\", function() {\r",
							"    pm.expect(jsonData.Address_1__c).to.eql(FirstAddressLine[index]);\r",
							"});\r",
							"console.log(\"Study Location First Address Line from PF:\", FirstAddressLine[index])\r",
							"console.log(\"Study Location First Address Line in SF:\", jsonData.Address_1__c)\r",
							"\r",
							"pm.test(\"Second Address Line match\", function() {\r",
							"    pm.expect(jsonData.Address_2__c).to.eql(SecondAddressLine[index]);\r",
							"});\r",
							"console.log(\"Study Location Second Address Line from PF:\", SecondAddressLine[index])\r",
							"console.log(\"Study Location Second Address Line in SF:\", jsonData.Address_2__c)\r",
							"\r",
							"pm.test(\"Third Address Line match\", function() {\r",
							"    pm.expect(jsonData.Address_3__c).to.eql(ThirdAddressLine[index]);\r",
							"});\r",
							"console.log(\"Study Location Third Address Line from PF:\", ThirdAddressLine[index])\r",
							"console.log(\"Study Location Third Address Line in SF:\", jsonData.Address_3__c)\r",
							"\r",
							"pm.test(\"City match\", function() {\r",
							"    pm.expect(jsonData.City__c).to.eql(CityName[index]);\r",
							"});\r",
							"console.log(\"Study Location City from PF:\", CityName[index])\r",
							"console.log(\"Study Location City in SF:\", jsonData.City__c)\r",
							"\r",
							"pm.test(\"Postal Code match\", function() {\r",
							"    pm.expect(jsonData.Postal_Code__c).to.eql(PostCode[index]);\r",
							"});\r",
							"console.log(\"Study Location Postal Code from PF:\", PostCode[index])\r",
							"console.log(\"Study Location Postal Code in SF:\", jsonData.Postal_Code__c)\r",
							"\r",
							"pm.test(\"Location name match\", function() {\r",
							"    pm.expect(jsonData.Name).to.eql(locationM[index]);\r",
							"});\r",
							"console.log(\"Study Location name from PF:\", locationM[index])\r",
							"console.log(\"Study Location name in SF:\", jsonData.Name)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/Study_Location__c/{{StudyLocationId}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find Country ISO code by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var CountryCode = pm.environment.get(\"CountryCode\");\r",
							"var index = pm.environment.get(\"index\");\r",
							"pm.test(\"Country code Match\", function () {\r",
							"    pm.expect(jsonData.records[0].ISO_CODE__c).to.eql(CountryCode[index]);\r",
							"});\r",
							"console.log(\"Study Location Country code from PF:\", CountryCode[index])\r",
							"console.log(\"Study Location Country code in SF:\", jsonData.records[0].ISO_CODE__c)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT ISO_CODE__c FROM Country_List__c Where Id ='{{CountrySFid}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT ISO_CODE__c FROM Country_List__c Where Id ='{{CountrySFid}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "session data from PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"let sessRef = new Array();\r",
							"let sessStartDate = new Array();\r",
							"let sessEndDate = new Array();\r",
							"let sessLoc = new Array();\r",
							"let sessCap = new Array();\r",
							"let sessionName = new Array();\r",
							"let sessionDesc = new Array();\r",
							"let session1stTimingdate = new Array();\r",
							"let session1stTimingstarttime = new Array();\r",
							"let session1stTimingendtime = new Array();\r",
							"let session2ndTimingdate = new Array();\r",
							"let session2ndTimingstarttime = new Array();\r",
							"let session2ndTimingendtime = new Array();\r",
							"let i = 0;\r",
							"while (i < jsonData.data.instances[0].sessions.length){\r",
							"    sessRef.push(jsonData.data.instances[0].sessions[i].reference);\r",
							"    sessStartDate.push(jsonData.data.instances[0].sessions[i].startDate);\r",
							"    sessEndDate.push(jsonData.data.instances[0].sessions[i].endDate);\r",
							"    sessLoc.push(jsonData.data.instances[0].sessions[i].location.name);\r",
							"    sessCap.push(jsonData.data.instances[0].capacity);\r",
							"    var sessStartTime = jsonData.data.instances[0].sessions[i].timings[0].startTime\r",
							"    console.log(sessStartTime);\r",
							"    var moment = require('moment');\r",
							"    var convertedDate = moment(sessStartDate[i]).format(\"DD/MM/YYYY\");\r",
							"    sessionName.push(\"Session\"  + \" \" + jsonData.data.instances[0].sessions[i].sessionNumber + \" \" + convertedDate + \" \" + sessStartTime);\r",
							"    sessionDesc.push(\"Session\"  + \" \" + jsonData.data.instances[0].sessions[i].sessionNumber + \" \" + jsonData.data.instances[0].sessions[i].location.name + \" \" + sessStartTime);\r",
							"    session1stTimingdate.push(jsonData.data.instances[0].sessions[i].timings[0].sessionDate);\r",
							"    session1stTimingstarttime.push(jsonData.data.instances[0].sessions[i].timings[0].startTime);\r",
							"    session1stTimingendtime.push(jsonData.data.instances[0].sessions[i].timings[0].endTime);\r",
							"    if (jsonData.data.instances[0].sessions[i].timings.length > 1){\r",
							"        session2ndTimingdate.push(jsonData.data.instances[0].sessions[i].timings[1].sessionDate);\r",
							"        session2ndTimingstarttime.push(jsonData.data.instances[0].sessions[i].timings[1].startTime);\r",
							"        session2ndTimingendtime.push(jsonData.data.instances[0].sessions[i].timings[1].endTime);\r",
							"    }\r",
							"    else{\r",
							"        session2ndTimingdate.push(null);\r",
							"        session2ndTimingstarttime.push(null);\r",
							"        session2ndTimingendtime.push(null);\r",
							"    }\r",
							"    i++;\r",
							"}\r",
							"pm.environment.set(\"sessRef\", sessRef); \r",
							"pm.environment.set(\"sessStartDate\", sessStartDate); \r",
							"pm.environment.set(\"sessEndDate\", sessEndDate); \r",
							"pm.environment.set(\"sessLoc\", sessLoc); \r",
							"pm.environment.set(\"sessCap\", sessCap); \r",
							"pm.environment.set(\"sessionName\", sessionName); \r",
							"pm.environment.set(\"sessionDesc\", sessionDesc);\r",
							"pm.environment.set(\"session1stTimingdate\", session1stTimingdate);\r",
							"pm.environment.set(\"session1stTimingstarttime\", session1stTimingstarttime);\r",
							"pm.environment.set(\"session1stTimingendtime\", session1stTimingendtime);\r",
							"pm.environment.set(\"session2ndTimingdate\", session2ndTimingdate);\r",
							"pm.environment.set(\"session2ndTimingstarttime\", session2ndTimingstarttime);\r",
							"pm.environment.set(\"session2ndTimingendtime\", session2ndTimingendtime);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var InstanceReferenceforGraph = pm.environment.get(\"InstanceReferenceforGraph\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n    instances(reference:\"{{InstanceReferenceforGraph}}\"){\r\n        capacity\r\n        stream {name}\r\n        sessions {\r\n            sessionNumber\r\n            reference\r\n            sessionDuration {\r\n                description\r\n                dateCount\r\n                }\r\n            startDate\r\n            endDate\r\n            location {name}\r\n        timings {\r\n            reference\r\n            sessionDate\r\n            startTime\r\n            endTime\r\n            }\r\n        }\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "SoQL to find and test session_c",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var sessRef = pm.environment.get(\"sessRef\"); ",
							"var sessStartDate = pm.environment.get(\"sessStartDate\"); ",
							"var sessEndDate = pm.environment.set(\"sessEndDate\"); ",
							"var sessLoc = pm.environment.get(\"sessLoc\"); ",
							"var sessCap = pm.environment.get(\"sessCap\"); ",
							"var sessionName = pm.environment.get(\"sessionName\"); ",
							"var sessionDesc = pm.environment.get(\"sessionDesc\");",
							"var session1stTimingdate = pm.environment.get(\"session1stTimingdate\");",
							"var session1stTimingstarttime = pm.environment.get(\"session1stTimingstarttime\");",
							"var session1stTimingendtime = pm.environment.get(\"session1stTimingendtime\");",
							"var session2ndTimingdate = pm.environment.get(\"session2ndTimingdate\");",
							"var session2ndTimingstarttime = pm.environment.get(\"session2ndTimingstarttime\");",
							"var session2ndTimingendtime = pm.environment.get(\"session2ndTimingendtime\");",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\");",
							"var StudyMode = pm.environment.get(\"StudyMode\");",
							"",
							"if(NumberOfSession != jsonData.records.length){",
							"    console.error(\"Sesion number in PF != number of session in SF\")",
							"}",
							"else{",
							"    let i = 0;",
							"    while(i < jsonData.records.length){",
							"        pm.test(\"Reference match\", function() {",
							"            pm.expect(jsonData.records[i].BPP_PF_SessionId__c).to.eql(sessRef[i]);",
							"        });",
							"        console.log(\"Session Reference from PF:\", sessRef[i]);",
							"        console.log(\"Session Reference in SF:\", jsonData.records[i].BPP_PF_SessionId__c);",
							"        pm.test(\"Session Date match\", function() {",
							"            pm.expect(jsonData.records[i].Session_Date__c).to.eql(sessStartDate[i]);",
							"        });",
							"        console.log(\"Session Date from PF:\", sessStartDate[i]);",
							"        console.log(\"Session Date in SF:\", jsonData.records[i].Session_Date__c);",
							"        pm.test(\"Location match\", function() {",
							"            pm.expect(jsonData.records[i].Location__c).to.eql(sessLoc[i]);",
							"        });",
							"        console.log(\"Session Location from PF:\", sessLoc[i]);",
							"        console.log(\"Session Location in SF:\", jsonData.records[i].Location__c);",
							"        pm.test(\"Capacity match\", function() {",
							"            pm.expect(jsonData.records[i].Session_Capacity__c).to.eql(sessCap[i]);",
							"        });",
							"        console.log(\"Session Capacity from PF:\", sessCap[i]);",
							"        console.log(\"Session Capacity in SF:\", jsonData.records[i].Session_Capacity__c);",
							"        pm.test(\"Name match\", function() {",
							"            pm.expect(jsonData.records[i].Name).to.eql(sessionName[i]);",
							"        });",
							"        console.log(\"Session Name from PF:\", sessionName[i]);",
							"        console.log(\"Session Name in SF:\", jsonData.records[i].Name);",
							"        pm.test(\"Description match\", function() {",
							"            pm.expect(jsonData.records[i].Session_Description__c).to.eql(sessionDesc[i]);",
							"        });",
							"        console.log(\"Session Description from PF:\", sessionDesc[i]);",
							"        console.log(\"Session Description in SF:\", jsonData.records[i].Session_Description__c);",
							"        pm.test(\"Study mode match\", function() {",
							"            pm.expect(jsonData.records[i].Study_Mode__c).to.eql(StudyMode);",
							"        });",
							"        console.log(\"Session Study mode from PF:\", StudyMode);",
							"        console.log(\"Session Study mode in SF:\", jsonData.records[i].Study_Mode__c);",
							"        pm.test(\"Session 1st timing start time match\", function() {",
							"            pm.expect(jsonData.records[i].Start_Time__c).to.eql(session1stTimingstarttime[i]);",
							"        });",
							"        console.log(\"Session 1st timing start time from PF:\", session1stTimingstarttime[i]);",
							"        console.log(\"Session 1st timing start time in SF:\", jsonData.records[i].Start_Time__c);",
							"        pm.test(\"Session 1st timing end time match\", function() {",
							"            pm.expect(jsonData.records[i].End_Time__c).to.eql(session1stTimingendtime[i]);",
							"        });",
							"        console.log(\"Session 1st timing end time from PF:\", session1stTimingendtime[i]);",
							"        console.log(\"Session 1st timing end time in SF:\", jsonData.records[i].End_Time__c);",
							"        pm.test(\"Second session date match\", function() {",
							"            pm.expect(jsonData.records[i].Second_Session_Date__c).to.eql(session2ndTimingdate[i]);",
							"        });",
							"        console.log(\"Session Second session date from PF:\", session2ndTimingdate[i]);",
							"        console.log(\"Session Second session date in SF:\", jsonData.records[i].Second_Session_Date__c);",
							"        pm.test(\"Second session start time match\", function() {",
							"            pm.expect(jsonData.records[i].Second_Session_Start_Time__c).to.eql(session2ndTimingstarttime[i]);",
							"        });",
							"        console.log(\"Session Second session start time from PF:\", session2ndTimingstarttime[i]);",
							"        console.log(\"Session Second session start time in SF:\", jsonData.records[i].Second_Session_Start_Time__c);",
							"        pm.test(\"Second session end time match\", function() {",
							"            pm.expect(jsonData.records[i].Second_Session_End_Time__c).to.eql(session2ndTimingendtime[i]);",
							"        });",
							"        console.log(\"Session Second session end time from PF:\", session2ndTimingendtime[i]);",
							"        console.log(\"Session Second session end time in SF:\", jsonData.records[i].Second_Session_End_Time__c);",
							"        i++",
							"    }",
							"}",
							"var g = pm.environment.get(\"g\");",
							"var arr = pm.environment.get(\"arr\");",
							"if (g < arr){",
							"    postman.setNextRequest('SF Instance test v2.0');",
							"    console.log(\"Last session ran for current Instance, proceed to next Instance\");",
							"}",
							"else {",
							"    postman.setNextRequest('SoQL to find Materials v2.0');",
							"    console.log(\"Last session ran for current Instance, and all Instances processed already. Proceed to course Materials\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, Name, Instance__c, End_Time__c, Location__c, Session_Capacity__c, Session_Date__c, Session_Description__c, Start_Time__c, BPP_PF_SessionId__c, Session_Product__c, Second_Session_Date__c, Second_Session_End_Time__c, Second_Session_Start_Time__c, Study_Mode__c FROM Session__c WHERE Instance__c = '{{InstanceID}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, Name, Instance__c, End_Time__c, Location__c, Session_Capacity__c, Session_Date__c, Session_Description__c, Start_Time__c, BPP_PF_SessionId__c, Session_Product__c, Second_Session_Date__c, Second_Session_End_Time__c, Second_Session_Start_Time__c, Study_Mode__c FROM Session__c WHERE Instance__c = '{{InstanceID}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find Materials v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var SFmatid = jsonData.records[0].Id;",
							"console.log(SFmatid);",
							"pm.environment.set(\"SFmatid\", SFmatid);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var MatRef = pm.environment.get(\"PF_referenceMat\");",
							"var d = pm.environment.get(\"startIndex\");",
							"var matQTY = pm.environment.get(\"matQTY\");",
							"var matIn = pm.environment.get(\"matIn\");",
							"if (matQTY > matIn){",
							"    var materialsRef = MatRef[matIn];",
							"    console.log(\"Searching for materials in SF by PF ref:\", materialsRef);",
							"    pm.environment.unset(\"materialsRef\");",
							"    pm.environment.set(\"materialsRef\", materialsRef);",
							"    pm.environment.unset(\"indexM\");",
							"    pm.environment.set(\"indexM\", matIn);",
							"}",
							"else {",
							"   postman.setNextRequest('SoQL to find Product for session v2.0');",
							"   console.log(\"No more (or no) materials to test. Proceed to Session Product in SF\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Product2\nwhere  Standalone_Material__c = false and BPP_ProductFactoryID__c ='{{materialsRef}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Product2\nwhere  Standalone_Material__c = false and BPP_ProductFactoryID__c ='{{materialsRef}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SF Materials test v2.0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var BillingFreq = pm.environment.get(\"BillingFreq\");",
							"var BillingRule = pm.environment.get(\"BillingRule\");",
							"var RRRuleforMat = pm.environment.get(\"RRRuleforMat\");",
							"var TaxRule = pm.environment.get(\"TaxRule\");",
							"var ChargeType = pm.environment.get(\"ChargeType\");",
							"var MaterialWeight = pm.environment.get(\"MaterialWeight\");",
							"var MaterialProductCode = pm.environment.get(\"MaterialProductCode\");",
							"var ProjectFinDimCrsMat = pm.environment.get(\"ProjectFinDimCrsMat\");",
							"var ProductFinDimCrsMat = pm.environment.get(\"ProductFinDimCrsMat\");",
							"var MaterialsFormat = pm.environment.get(\"MaterialsFormat\");",
							"var LegalEntityMaterils = pm.environment.get(\"LegalEntityMaterils\");",
							"var famvalue = \"Materials\";",
							"var MatName = pm.environment.get(\"MatName\"); ",
							"var MatDesc = pm.environment.get(\"MatDesc\");",
							"var indexM = pm.environment.get(\"indexM\"); ",
							"var MaterialsVatRule = pm.environment.get(\"MaterialsVatRule\");",
							"var Vertical = pm.environment.get(\"Vertical\");",
							"var CourseType = pm.environment.get(\"CourseType\");",
							"var SittingName = pm.environment.get(\"SittingName\");",
							"var ISBNarray = pm.environment.get(\"ISBNarray\");",
							"var EditionArr = pm.environment.get(\"EditionArr\");",
							"var MaterialsSFId = jsonData.Id;",
							"pm.environment.set(\"MaterialsSFId\", MaterialsSFId);",
							"pm.test(\"Materials ISBN match\", function () {",
							"    pm.expect(jsonData.BPP_ISBN__c).to.eql(ISBNarray[indexM]);",
							"   });",
							"console.log(\"Materials ISBN from PF:\", ISBNarray[indexM]);",
							"console.log(\"Materials ISBN in SF:\", jsonData.BPP_ISBN__c);",
							"",
							"pm.test(\"Materials Edition match\", function () {",
							"    pm.expect(jsonData.BPP_Edition__c).to.eql(EditionArr[indexM]);",
							"   });",
							"console.log(\"Materials Edition from PF:\", EditionArr[indexM]);",
							"console.log(\"Materials Edition in SF:\", jsonData.BPP_Edition__c);",
							"",
							"pm.test(\"Materials Legal entity match\", function () {",
							"    pm.expect(jsonData.BPP_Legal_Entity__c).to.eql(LegalEntityMaterils);",
							"   });",
							"console.log(\"Materials Legal entity from PF:\", LegalEntityMaterils);",
							"console.log(\"Materials Legal entity in SF:\", jsonData.BPP_Legal_Entity__c);",
							"",
							"pm.test(\"Course Sitting match\", function () {",
							"    pm.expect(jsonData.Sitting__c).to.eql(SittingName);",
							"   });",
							"console.log(\"Materials Sitting from PF:\", SittingName);",
							"console.log(\"Materials Sitting in SF:\", jsonData.Sitting__c);",
							"",
							"pm.test(\"Course type match\", function () {",
							"    pm.expect(jsonData.Course_Type__c).to.eql(CourseType);",
							"   });",
							"console.log(\"Materials Course type from PF:\", CourseType);",
							"console.log(\"Materials Course type in SF:\", jsonData.Course_Type__c);",
							"",
							"pm.test(\"Course Vertical match\", function () {",
							"    pm.expect(jsonData.Vertical__c).to.eql(Vertical);",
							"   });",
							"console.log(\"Materials Vertical from PF:\", Vertical);",
							"console.log(\"Materials Vertical in SF:\", jsonData.Vertical__c);",
							"",
							"pm.test(\"Meterials Family match\", function() {",
							"    pm.expect(jsonData.Family).to.eql(famvalue);",
							"});",
							"console.log(\"Materials Family in SF:\", jsonData.Family);",
							"",
							"pm.test(\"IsActive true\", function () {",
							"     pm.expect(jsonData.IsActive).to.be.true;",
							"});",
							"console.log(\"Materials are active in SF:\", jsonData.IsActive);",
							"",
							"pm.test(\"Material Project Financial Dimensions match\", function () {",
							"     pm.expect(jsonData.Project_Financial_Dimension__c).to.eql(ProjectFinDimCrsMat[indexM]);",
							"});",
							"console.log(\"Materials Project Financial Dimensions (taken from Material Type) from PF:\", ProjectFinDimCrsMat[indexM]);",
							"console.log(\"Materials Project Financial Dimensions in SF:\", jsonData.Project_Financial_Dimension__c);",
							"",
							"pm.test(\"Material Product Financial Dimensions match\", function () {",
							"     pm.expect(jsonData.Product_Financial_Dimension__c).to.eql(ProductFinDimCrsMat[indexM]);",
							"});",
							"console.log(\"Materials Product Financial Dimensions (taken from Course body) from PF:\", ProductFinDimCrsMat[indexM]);",
							"console.log(\"Materials Product Financial Dimensions in SF:\", jsonData.Product_Financial_Dimension__c);",
							"",
							"pm.test(\"Material Format match\", function () {",
							"     pm.expect(jsonData.Format__c).to.eql(MaterialsFormat[indexM]);",
							"});",
							"console.log(\"Materials Format from PF:\", MaterialsFormat[indexM]);",
							"console.log(\"Materials Format in SF:\", jsonData.Format__c);",
							"",
							"pm.test(\"Material name match\", function () {",
							"     pm.expect(jsonData.Name).to.eql(MatName[indexM]);",
							"});",
							"console.log(\"Materials name (generated by Middleware) from PF:\", MatName[indexM]);",
							"console.log(\"Materials name in SF:\", jsonData.Name);",
							"",
							"pm.test(\"Material Vat Rule match\", function () {",
							"     pm.expect(jsonData.BPP_Product_Tax_Category__c).to.eql(MaterialsVatRule[indexM]);",
							"});",
							"console.log(\"Materials Tax Category (VAT Rule) from PF:\", MaterialsVatRule[indexM]);",
							"console.log(\"Materials  in SF:\", jsonData.BPP_Product_Tax_Category__c);",
							"",
							"pm.test(\"Material description match\", function () {",
							"     pm.expect(jsonData.Description).to.eql(MatDesc[indexM]);",
							"});",
							"console.log(\"Materials description from PF:\", MatDesc[indexM]);",
							"console.log(\"Materials description in SF:\", jsonData.Description);",
							"",
							"pm.test(\"Material weight match\", function () {",
							"     pm.expect(jsonData.Weight__c).to.eql(MaterialWeight[indexM]);",
							"});",
							"console.log(\"Materials weight from PF:\", MaterialWeight[indexM]);",
							"console.log(\"Materials weight in SF:\", jsonData.Weight__c);",
							"",
							"pm.test(\"Material product code match\", function () {",
							"     pm.expect(jsonData.ProductCode).to.eql(MaterialProductCode[indexM]);",
							"});",
							"console.log(\"Materials product code from PF:\", MaterialProductCode[indexM]);",
							"console.log(\"Materials product code in SF:\", jsonData.ProductCode);",
							"",
							"var MaterialType = pm.environment.get(\"MaterialType\"); ",
							"if (MaterialType[indexM] === \"BPP Learning media\"){",
							"    pm.test(\"NonDiscountable for BPP Learning media\", function () {",
							"        pm.expect(jsonData.SBQQ__NonDiscountable__c).to.be.false;",
							"    });",
							"    console.log(\"Materials NonDiscountable should be FALSE for BPP Learning media:\", jsonData.SBQQ__NonDiscountable__c);",
							"    pm.test(\"Pricing Method editable for BPP Learning media\", function () {",
							"        pm.expect(jsonData.SBQQ__PricingMethodEditable__c).to.be.false;",
							"    });",
							"    console.log(\"Materials Pricing Method editable should be FALSE for BPP Learning media:\", jsonData.SBQQ__PricingMethodEditable__c);",
							"}",
							"else {",
							"    pm.test(\"NonDiscountable for External Materials\", function () {",
							"        pm.expect(jsonData.SBQQ__NonDiscountable__c).to.be.true;",
							"    });",
							"    console.log(\"Materials NonDiscountable should be TRUE for External Materials:\", jsonData.SBQQ__NonDiscountable__c);",
							"    pm.test(\"Pricing Method editable for External Materials\", function () {",
							"        pm.expect(jsonData.SBQQ__PricingMethodEditable__c).to.be.true;",
							"    });",
							"    console.log(\"Materials Pricing Method editable should be TRUE for External Materials:\", jsonData.SBQQ__PricingMethodEditable__c);",
							"}",
							"",
							"pm.test(\"QuantityEditable test\", function () {",
							"     pm.expect(jsonData.SBQQ__QuantityEditable__c).to.be.true;",
							"   });",
							"console.log(\"Materials QuantityEditable in SF should be TRUE:\", jsonData.SBQQ__QuantityEditable__c);",
							"",
							"pm.test(\"PriceEditable test\", function () {",
							"     pm.expect(jsonData.SBQQ__PriceEditable__c).to.be.true;",
							"   });",
							"console.log(\"Materials PriceEditable in SF should be TRUE:\", jsonData.SBQQ__PriceEditable__c);",
							"",
							"pm.test(\"Billing Frequency Match\", function () {",
							"    pm.expect(jsonData.SBQQ__BillingFrequency__c).to.eql(BillingFreq);",
							"   });",
							"console.log(\"Materials Billing Frequency in SF for Crs Materials should be 'Monthly':\", jsonData.SBQQ__BillingFrequency__c);",
							"",
							"pm.test(\"Billing Rule Match\", function () {",
							"    pm.expect(jsonData.blng__BillingRule__c).to.eql(BillingRule);",
							"   });",
							"console.log(\"Materials Billing Rule in SF set to 'Combined Billing Rule - Generate Invoice - Combined Partials'(a4Cg00000006VfTEAU) by Middleware:\", jsonData.blng__BillingRule__c);",
							"",
							"pm.test(\"Revenue recognition Rule match\", function () {",
							"    pm.expect(jsonData.blng__RevenueRecognitionRule__c).to.eql(RRRuleforMat[indexM]);",
							"   });",
							"console.log(\"Materials Revenue recognition Rule in SF set to 'Full One Off Rec'(a4vg0000000RPdhAAG) by Middleware:\", jsonData.blng__RevenueRecognitionRule__c);",
							"",
							"pm.test(\"Tax Rule match\", function () {",
							"    pm.expect(jsonData.blng__TaxRule__c).to.eql(TaxRule);",
							"   });",
							"console.log(\"Materials Tax Rule in SF set to 'Domestic Business - UK Classroom Courses'(a53g0000000hg2ZAAQ) by Middleware:\", jsonData.blng__TaxRule__c);",
							"",
							"pm.test(\"ChargeType test\", function () {",
							"    pm.expect(jsonData.SBQQ__ChargeType__c).to.eql(ChargeType);",
							"   });",
							"console.log(\"Materials ChargeType set by Middleware to 'Usage' in SF:\", jsonData.SBQQ__ChargeType__c);",
							"",
							"let clienttag = new Array();",
							"clienttag = pm.environment.get(\"Clients\"); ",
							"if (clienttag.length === 0){",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(null);",
							"    });",
							"    console.log(\"No spesific Client for current crs materials\");",
							"}",
							"else {",
							"    var i;",
							"    var lengC = \"\";",
							"        for (i=0; i<clienttag.length; i++){",
							"        lengC += clienttag[i];",
							"        lengC += \", \";",
							"        }",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(lengC.slice(0,-2));",
							"    });",
							"    console.log(\"Materials Clients from PF:\", lengC.slice(0,-2));",
							"    console.log(\"Materials Clients in SF:\", jsonData.Client_Tags__c);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/Product2/{{SFmatid}}"
			},
			"response": []
		},
		{
			"name": "Stock Site data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var numberOfStockSites = jsonData.data.materials.result[0].materialStockSites.length;\r",
							"pm.environment.set(\"numberOfStockSites\", numberOfStockSites);\r",
							"\r",
							"let SSProductionmethod = new Array();\r",
							"let SSreference = new Array();\r",
							"if (numberOfStockSites > 0){\r",
							"    for (i=0; i<numberOfStockSites; i++){\r",
							"        SSreference.push(jsonData.data.materials.result[0].materialStockSites[i].stockSiteReference);\r",
							"        SSProductionmethod.push(jsonData.data.materials.result[0].materialStockSites[i].productionMethod)\r",
							"    }\r",
							"    pm.environment.set(\"SSreference\", SSreference);\r",
							"    pm.environment.set(\"SSProductionmethod\", SSProductionmethod);\r",
							"}\r",
							"else {postman.setNextRequest('SoQL to find PriceEntry v2.0');\r",
							"    console.log(\"No Stock Site found\")\r",
							"}\r",
							"\r",
							"let SFidTOpfRef = {\r",
							"    \"a5rg0000000nkA1AAI\" : \"dd577eb3-cf90-497a-b771-326206a912f4\",\r",
							"    \"a5rg0000000rVO8AAM\" : \"97111a40-51d1-4534-b9bf-af31c295bedf\",\r",
							"    \"a5rg0000000r8oyAAA\" : \"794ddf19-d841-40ad-950a-5fb54ea7d6bc\",\r",
							"    \"a5rg0000000pPaSAAU\" : \"9f123da9-d91d-4927-a631-2347aa8e16b6\"\r",
							"}\r",
							"//If new Stock Site will be added in PF it will be needed to add it in this tuple with its SF Id\r",
							"\r",
							"function getKeyByValue(object, value) {\r",
							"  return Object.keys(object).find(key => object[key] === value);\r",
							"}\r",
							"\r",
							"let StockSiteSFid = new Array();\r",
							"for (j=0; j<numberOfStockSites; j++){\r",
							"    StockSiteSFid.push(getKeyByValue(SFidTOpfRef, SSreference[j]));\r",
							"}\r",
							"pm.environment.set(\"StockSiteSFid\", StockSiteSFid);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\nmaterials(reference: \"{{materialsRef}}\"){\r\n    pageInfo{hasMore}\r\n    result{\r\n        expiryDate\r\n        availableDate\r\n        price\r\n        isDigitalMaterial\r\n        isbn\r\n        weight\r\n        productCode\r\n        materialStockSites {\r\n            materialReference\r\n            productionMethod\r\n            stockSite{\r\n                addressLine1\r\n                addressLine2\r\n                addressLine3\r\n                city\r\n                countryCode\r\n                createdBy\r\n                name\r\n                postcode\r\n                reference\r\n            }\r\n            stockSiteName\r\n            stockSiteReference}\r\n        }\r\n    }\r\n} "
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "SoQL to find and test StockManagement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var numberOfStockSites = pm.environment.get(\"numberOfStockSites\");",
							"var StockMngmntQTY = jsonData.records.length;",
							"if (StockMngmntQTY !== numberOfStockSites) {console.error('Number of Stock Sites not Match number of Stock Management')};",
							"",
							"var indexM = pm.environment.get(\"indexM\");",
							"var MaterialsExpiryDate = pm.environment.get(\"MaterialsExpiryDate\");",
							"var MaterialsAvailableFromDate = pm.environment.get(\"MaterialsAvailableFromDate\");",
							"var SSProductionmethod = pm.environment.get(\"SSProductionmethod\");",
							"var SSreference = pm.environment.get(\"SSreference\");",
							"var StockSiteSFid = pm.environment.get(\"StockSiteSFid\");",
							"",
							"for (i=0; i<StockMngmntQTY; i++){",
							"    var indexSS = StockSiteSFid.indexOf(jsonData.records[i].Stock_Site__c)",
							"    pm.test(\"Stock Management available from date match\", function () {",
							"        pm.expect(jsonData.records[i].Available_From__c).to.eql(MaterialsAvailableFromDate[indexM]);",
							"    });",
							"    console.log(\"Stock Management available from date from PF:\", MaterialsAvailableFromDate[indexM]);",
							"    console.log(\"Stock Management available from date in SF:\", jsonData.records[i].Available_From__c);",
							"    pm.test(\"Stock Management expiry date match\", function () {",
							"        pm.expect(jsonData.records[i].Expiry_Date__c).to.eql(MaterialsExpiryDate[indexM]);",
							"    });",
							"    console.log(\"Stock Management expiry date from PF:\", MaterialsExpiryDate[indexM]);",
							"    console.log(\"Stock Management expiry date in SF:\", jsonData.records[i].Expiry_Date__c);",
							"    pm.test(\"Stock Management Production Method match\", function () {",
							"        pm.expect(jsonData.records[i].Production_Method__c).to.eql(SSProductionmethod[indexSS]);",
							"    });",
							"    console.log(\"Stock Management Production Method from PF:\", SSProductionmethod[indexSS]);",
							"    console.log(\"Stock Management Production Method in SF:\", jsonData.records[i].Production_Method__c);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, Available_From__c, Expiry_Date__c, Production_Method__c, Stock_Site__c, Product__c  FROM Stock_Management__c where Product_Factory_Product_ID__c='{{materialsRef}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, Available_From__c, Expiry_Date__c, Production_Method__c, Stock_Site__c, Product__c  FROM Stock_Management__c where Product_Factory_Product_ID__c='{{materialsRef}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find PriceEntry v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var MatPrice = pm.environment.get(\"MatPrice\"); ",
							"var indexM = pm.environment.get(\"indexM\"); ",
							"pm.test(\"Material price match\", function () {",
							"    pm.expect(jsonData.records[0].UnitPrice).to.eql(MatPrice[indexM]);",
							"});",
							"console.log(\"Materials price from PF:\", MatPrice[indexM]);",
							"console.log(\"Materials price in SF:\", jsonData.records[0].UnitPrice);",
							"",
							"var MaterialsCost = pm.environment.get(\"MaterialsCost\");",
							"var indexM = pm.environment.get(\"indexM\");",
							"if (MaterialsCost[indexM] == null) {",
							"    postman.setNextRequest('SoQL to find ProdOptM v2.0');",
							"    console.log(\"No Cost object present, proceed to Product Option tests\")",
							"    //if cost equals to 0 in PF, Cost object will be not created in SF",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id,Name,UnitPrice,IsActive,Pricebook2Id,Product2Id FROM PricebookEntry where Product2Id='{{SFmatid}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id,Name,UnitPrice,IsActive,Pricebook2Id,Product2Id FROM PricebookEntry where Product2Id='{{SFmatid}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find Materials Cost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var MaterialsCost = pm.environment.get(\"MaterialsCost\"); ",
							"var indexM = pm.environment.get(\"indexM\");",
							"pm.test(\"Material Cost match\", function () {",
							"    pm.expect(jsonData.records[0].SBQQ__UnitCost__c).to.eql(MaterialsCost[indexM]);",
							"});",
							"console.log(\"Materials Cost from PF:\", MaterialsCost[indexM]);",
							"console.log(\"Materials Cost in SF:\", jsonData.records[0].SBQQ__UnitCost__c);",
							"pm.test(\"Material Cost Active\", function () {",
							"    pm.expect(jsonData.records[0].SBQQ__Active__c).to.be.true;",
							"});",
							"console.log(\"Materials Cost object Active in SF:\", jsonData.records[0].SBQQ__Active__c);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id, Name, SBQQ__Active__c, SBQQ__UnitCost__c\nFROM SBQQ__Cost__c WHERE SBQQ__Product__c='{{SFmatid}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, Name, SBQQ__Active__c, SBQQ__UnitCost__c\nFROM SBQQ__Cost__c WHERE SBQQ__Product__c='{{SFmatid}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find ProdOptM v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var ProdOptMID = jsonData.records[0].Id;",
							"pm.environment.set(\"ProdOptMID\", ProdOptMID);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}' and  SBQQ__OptionalSKU__c ='{{SFmatid}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__ConfiguredSKU__c = '{{SF_course_id}}' and  SBQQ__OptionalSKU__c ='{{SFmatid}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProdOptMat test v2.0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var PF_MatQty = pm.environment.get(\"PF_MatQty\"); ",
							"var indexM = pm.environment.get(\"indexM\");",
							"var SF_course_id = pm.environment.get(\"SF_course_id\"); ",
							"var SFmatid = pm.environment.get(\"SFmatid\"); ",
							"var SF_P_feature_id_M = pm.environment.get(\"SF_P_feature_id_M\");",
							"var SBQQnum = pm.environment.get(\"SBQQnum\"); ",
							"var MatDeliverydefault = pm.environment.get(\"MatDeliveryDefault\");",
							"var MatDelDef;",
							"",
							"if (MatDeliverydefault[indexM] == \"Student\"){",
							"    MatDelDef = \"Deliver to Customer\"",
							"}",
							"else {MatDelDef = \"Deliver to BPP Location\"}",
							"",
							"pm.test(\"Meterial Product Option Delivery Default match\", function() {",
							"    pm.expect(jsonData.Delivery_Default__c).to.eql(MatDelDef);",
							"});",
							"console.log(\"Materials Product Option Delivery Default from PF:\", MatDelDef)",
							"console.log(\"Materials Product Option Delivery Default in SF:\", jsonData.Delivery_Default__c)",
							"",
							"pm.test(\"Meterial Product Option Number match\", function() {",
							"    pm.expect(jsonData.SBQQ__Number__c).to.eql(SBQQnum[indexM]);",
							"});",
							"console.log(\"Materials Product Option Number genarated by Middleware:\", SBQQnum[indexM])",
							"console.log(\"Materials Product Option Number in SF:\", jsonData.SBQQ__Number__c)",
							"",
							"pm.test(\"Meterial Product Option Quantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__Quantity__c).to.eql(PF_MatQty[indexM]);",
							"});",
							"console.log(\"Materials Product Option Quantity from PF:\", PF_MatQty[indexM])",
							"console.log(\"Materials Product Option Quantity in SF:\", jsonData.SBQQ__Quantity__c)",
							"",
							"pm.test(\"Meterial Product Option QuantityEditable match\", function () {",
							"     pm.expect(jsonData.SBQQ__QuantityEditable__c).to.be.true;",
							"});",
							"console.log(\"Materials Product Option QuantityEditable, set to TRUE by Middleware, in SF:\", jsonData.SBQQ__QuantityEditable__c)",
							"",
							"pm.test(\"Meterial Product Option Selected__c match\", function () {",
							"     pm.expect(jsonData.SBQQ__Selected__c).to.be.true;",
							"});",
							"console.log(\"Materials Product Option Selected, set to TRUE by Middleware, in SF:\", jsonData.SBQQ__Selected__c)",
							"",
							"pm.test(\"Meterial Product Option Required__c match\", function () {",
							"     pm.expect(jsonData.SBQQ__Required__c).to.be.false;",
							"});",
							"console.log(\"Materials Product Option Selected, set to FALSE by Middleware, in SF:\", jsonData.SBQQ__Required__c)",
							"",
							"pm.test(\"Meterial Product Option MinQuantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__MinQuantity__c).to.eql(null);",
							"});",
							"console.log(\"Materials Product Option MinQuantity, set to 'null' by Middleware, in SF:\", jsonData.SBQQ__MinQuantity__c)",
							"",
							"pm.test(\"Meterial Product Option MaxQuantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__MaxQuantity__c).to.eql(null);",
							"});",
							"console.log(\"Materials Product Option MaxQuantity, set to 'null' by Middleware, in SF:\", jsonData.SBQQ__MaxQuantity__c)",
							"",
							"pm.test(\"Meterial Product Option ConfiguredSKU match\", function() {",
							"    pm.expect(jsonData.SBQQ__ConfiguredSKU__c).to.eql(SF_course_id);",
							"});",
							"console.log(\"ConfiguredSKU, Parent Course SF Id:\", SF_course_id)",
							"console.log(\"Materials Product Option ConfiguredSKU in SF:\", jsonData.SBQQ__ConfiguredSKU__c)",
							"",
							"pm.test(\"Meterial Product Option OptionalSKU match\", function() {",
							"    pm.expect(jsonData.SBQQ__OptionalSKU__c).to.eql(SFmatid);",
							"});",
							"console.log(\"OptionalSKU, Related Materials SF Id:\", SFmatid)",
							"console.log(\"Materials Product Option OptionalSKU in SF:\", jsonData.SBQQ__OptionalSKU__c)",
							"",
							"pm.test(\"Meterial Product Option FeatureID match\", function() {",
							"    pm.expect(jsonData.SBQQ__Feature__c).to.eql(SF_P_feature_id_M);",
							"});",
							"console.log(\"Parent Course materials feature SF Id:\", SF_P_feature_id_M)",
							"console.log(\"Materials Product Option Feature in SF:\", jsonData.SBQQ__Feature__c)",
							"",
							"pm.test(\"Meterial Product Option Type match\", function() {",
							"    pm.expect(jsonData.SBQQ__Type__c).to.eql(\"Related Product\");",
							"});",
							"console.log(\"Materials Product Option Type ('Related Product') in SF:\", jsonData.SBQQ__Type__c)",
							"",
							"var matQTY = pm.environment.get(\"matQTY\"); ",
							"var matIn = pm.environment.get(\"matIn\");",
							"matIn = +matIn +1;",
							"pm.environment.unset(\"matIn\");",
							"pm.environment.set(\"matIn\", matIn);",
							"if (matIn < matQTY){",
							"   postman.setNextRequest('SoQL to find Materials v2.0'); ",
							"   console.log(\"Finished to test current materials product option and go to next materials\")",
							"}",
							"else {",
							"    postman.setNextRequest('SoQL to find Product for session v2.0');",
							"    console.log(\"No more materials to test, starting with Session product\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/SBQQ__ProductOption__c/{{ProdOptMID}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find Product for session v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if (jsonData.totalSize > 0){",
							"    var Prod2Session = jsonData.records[0].Id;",
							"    pm.environment.set(\"Prod2Session\", Prod2Session);}",
							"else {",
							"    postman.setNextRequest(\"Totara get course by digCon\");",
							"    console.log(\"No session?\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Product2\nwhere  BPP_ProductFactoryID__c ='{{PF_reference}} - Session {{ProdSessIn}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Product2\nwhere  BPP_ProductFactoryID__c ='{{PF_reference}} - Session {{ProdSessIn}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SF ProdForSession test v2.0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var BillingFreq = pm.environment.get(\"BillingFreq\");",
							"var BillingRule = pm.environment.get(\"BillingRule\");",
							"var RevenueRecRule = pm.environment.get(\"RevenueRecRule\");",
							"var TaxRule = pm.environment.get(\"TaxRule\");",
							"var ChargeType = pm.environment.get(\"ChargeType\");",
							"var CourseType = pm.environment.get(\"CourseType\");",
							"var BodySN = pm.environment.get(\"Body SN\");",
							"var LevelSN = pm.environment.get(\"Level SN\");",
							"var Paperdesc = pm.environment.get(\"Paper desc\");",
							"var Location_region = pm.environment.get(\"Location_region\");",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\");",
							"var SessionVatRule = pm.environment.get(\"CourseVatRule\");",
							"var Vertical = pm.environment.get(\"Vertical\");",
							"var LegalEntityCrSess = pm.environment.get(\"LegalEntityCrSess\");",
							"var SittingName = pm.environment.get(\"SittingName\");",
							"pm.test(\"Session Legal entity match\", function () {",
							"    pm.expect(jsonData.BPP_Legal_Entity__c).to.eql(LegalEntityCrSess);",
							"   });",
							"console.log(\"Legal entity from PF (hardcoded, LEM for materials; PED for everything else):\", LegalEntityCrSess);",
							"console.log(\"Legal entity in SF:\", jsonData.BPP_Legal_Entity__c);",
							"",
							"pm.test(\"Course Sitting match\", function () {",
							"    pm.expect(jsonData.Sitting__c).to.eql(SittingName);",
							"   });",
							"console.log(\"Session Course Sitting from PF:\", SittingName);",
							"console.log(\"Session Course Sitting in SF:\", jsonData.Sitting__c);",
							"",
							"pm.test(\"Course type match\", function () {",
							"    pm.expect(jsonData.Course_Type__c).to.eql(CourseType);",
							"   });",
							"console.log(\"Session Course type from PF:\", CourseType);",
							"console.log(\"Session Course type in SF:\", jsonData.Course_Type__c);",
							"",
							"pm.test(\"Course Vertical match\", function () {",
							"    pm.expect(jsonData.Vertical__c).to.eql(Vertical);",
							"   });",
							"console.log(\"Session Course Vertical from PF:\", Vertical);",
							"console.log(\"Session Course Vertical in SF:\", jsonData.Vertical__c);",
							"",
							"if (CourseType == \"Online\" && NumberOfSession === 1) {",
							"    pm.test(\"Session Family match\", function () {",
							"        pm.expect(jsonData.Family).to.eql(\"Online Session\");",
							"    });",
							"    console.log(\"If CourseType == 'Online' && NumberOfSession === 1 in PF, then Session product Family should be 'Online Session'\");",
							"    console.log(\"Session  in SF:\", jsonData.Family);",
							"}",
							"else {",
							"    pm.test(\"Session Family match\", function () {",
							"        pm.expect(jsonData.Family).to.eql(\"Session\");",
							"    });",
							"    console.log(\"Session Family hardcoded on Middleware to 'Session'\");",
							"    console.log(\"Session Product Family in SF:\", jsonData.Family);",
							"}",
							"",
							"pm.test(\"IsActive true\", function () {",
							"    pm.expect(jsonData.IsActive).to.be.true;",
							"});",
							"console.log(\"Session Product is Active in SF:\", jsonData.IsActive);",
							"",
							"var ProdSessIn = pm.environment.get(\"ProdSessIn\");",
							"var nameANDdesc = BodySN + \" \" + \"-\" + \" \" + LevelSN + \" \" + \"-\" + \" \" + Paperdesc + \" \" + \"-\" + \" \" + Location_region + \" \" + \"-\" + \" \" + \"Session\" + \" \" + ProdSessIn;",
							"pm.test(\"Name match\", function () {",
							"    pm.expect(jsonData.Name).to.eql(nameANDdesc);",
							"});",
							"console.log(\"Session Name generated by Middleware from PF data:\", nameANDdesc);",
							"console.log(\"Session Name in SF:\", jsonData.Name);",
							"",
							"pm.test(\"Vat Rule match\", function () {",
							"    pm.expect(jsonData.BPP_Product_Tax_Category__c).to.eql(SessionVatRule);",
							"});",
							"console.log(\"Session Vat Rule from PF (inherit from Course):\", SessionVatRule);",
							"console.log(\"Session Vat Rule in SF:\", jsonData.BPP_Product_Tax_Category__c);",
							"",
							"pm.test(\"Description match\", function () {",
							"    pm.expect(jsonData.Description).to.eql(nameANDdesc);",
							"});",
							"console.log(\"Session Description from PF:\", nameANDdesc);",
							"console.log(\"Session Description in SF:\", jsonData.Description);",
							"",
							"pm.test(\"Qualification match\", function () {",
							"    pm.expect(jsonData.Qualification__c).to.eql(BodySN);",
							"});",
							"console.log(\"Session Qualification from PF:\", BodySN);",
							"console.log(\"Session Qualification in SF:\", jsonData.Qualification__c);",
							"",
							"pm.test(\"Level_PQ match\", function () {",
							"    pm.expect(jsonData.Level_PQ__c).to.eql(LevelSN);",
							"});",
							"console.log(\"Session Level from PF:\", LevelSN);",
							"console.log(\"Session Level in SF:\", jsonData.Level_PQ__c);",
							"",
							"pm.test(\"Paper match\", function () {",
							"    pm.expect(jsonData.Paper__c).to.eql(Paperdesc);",
							"});",
							"console.log(\"Session Paper from PF:\", Paperdesc);",
							"console.log(\"Session Paper in SF:\", jsonData.Paper__c);",
							"",
							"pm.test(\"Location match\", function () {",
							"    pm.expect(jsonData.Location_PQ__c).to.eql(Location_region);",
							"});",
							"console.log(\"Session Location from PF:\", Location_region);",
							"console.log(\"Session Location in SF:\", jsonData.Location_PQ__c);",
							"",
							"pm.test(\"QuantityEditable match\", function () {",
							"    pm.expect(jsonData.SBQQ__QuantityEditable__c).to.be.true;",
							"});",
							"console.log(\"QuantityEditable (hardcoded on middleware - always 'True' for Session) in SF:\", jsonData.SBQQ__QuantityEditable__c);",
							"",
							"pm.test(\"PriceEditable match\", function () {",
							"    pm.expect(jsonData.SBQQ__PriceEditable__c).to.be.true;",
							"});",
							"console.log(\"PriceEditable (hardcoded on middleware - always 'True' for Session) in SF:\", jsonData.SBQQ__PriceEditable__c);",
							"",
							"pm.test(\"NonDiscountable match\", function () {",
							"    pm.expect(jsonData.SBQQ__NonDiscountable__c).to.be.false;",
							"});",
							"console.log(\"NonDiscountable (hardcoded on middleware - always 'False' for Session) in SF:\", jsonData.SBQQ__NonDiscountable__c);",
							"",
							"pm.test(\"ConfigurationType match\", function () {",
							"    pm.expect(jsonData.SBQQ__ConfigurationType__c).to.eql(null);",
							"});",
							"console.log(\"ConfigurationType (hardcoded on middleware - always 'null' for Session) in SF:\", jsonData.SBQQ__ConfigurationType__c); ",
							"",
							"pm.test(\"ConfigurationEvent match\", function () {",
							"    pm.expect(jsonData.SBQQ__ConfigurationEvent__c).to.eql(null);",
							"});",
							"console.log(\"ConfigurationEvent (hardcoded on middleware - always 'null' for Session) in SF:\", jsonData.SBQQ__ConfigurationEvent__c);",
							"",
							"pm.test(\"Billing Frequency Match\", function () {",
							"    pm.expect(jsonData.SBQQ__BillingFrequency__c).to.eql(BillingFreq);",
							"   });",
							"console.log(\"Billing Frequency (hardcoded on middleware - always 'Monthly' for Session) in SF:\", jsonData.SBQQ__BillingFrequency__c); ",
							"",
							"pm.test(\"Billing Rule Match\", function () {",
							"    pm.expect(jsonData.blng__BillingRule__c).to.eql(BillingRule);",
							"   });",
							"console.log(\"Billing Rule (hardcoded on middleware - always 'Combined Billing Rule - Generate Invoice - Combined Partials' for Session) in SF:\", jsonData.blng__BillingRule__c); ",
							"",
							"pm.test(\"Revenue recognition Rule match\", function () {",
							"    pm.expect(jsonData.blng__RevenueRecognitionRule__c).to.eql(RevenueRecRule);",
							"   });",
							"console.log(\"Revenue recognition Rule (hardcoded on middleware - always 'Full One Off Rec' for Session) in SF:\", jsonData.blng__RevenueRecognitionRule__c); ",
							"",
							"pm.test(\"Tax Rule match\", function () {",
							"    pm.expect(jsonData.blng__TaxRule__c).to.eql(TaxRule);",
							"   });",
							"console.log(\"Tax Rule (hardcoded on middleware - always 'Domestic Business - UK Classroom Courses' for Session) in SF:\", jsonData.blng__TaxRule__c);  ",
							"",
							"pm.test(\"ChargeType test\", function () {",
							"    pm.expect(jsonData.SBQQ__ChargeType__c).to.eql(ChargeType);",
							"   });",
							"console.log(\"ChargeType (hardcoded on middleware - always 'Usage' for Session) in SF:\", jsonData.SBQQ__ChargeType__c); ",
							"",
							"var ProjectFinDim = pm.environment.get(\"ProjectFinDimCrsAndSess\");",
							"var ProductFinDim = pm.environment.get(\"ProductFinDimCrsAndSess\");",
							"var DivisionFinDim = pm.environment.get(\"DivisionFinDimCrsAndSess\");",
							"var CostCentreFinDim = pm.environment.get(\"CostCentreFinDimCrsAndSess\");",
							"pm.test(\"Session Cost Centre Financial Dimensions match\", function () {",
							"    pm.expect(jsonData.Cost_Centre_Financial_Dimension__c).to.eql(CostCentreFinDim);",
							"   });",
							"console.log(\"Session Cost Centre Financial Dimensions from PF (taken from course Course Type in PF) :\", CostCentreFinDim);",
							"console.log(\"Session Cost Centre Financial Dimensions in SF:\", jsonData.Cost_Centre_Financial_Dimension__c);",
							"",
							"pm.test(\"Session Division Financial Dimensions match\", function () {",
							"    pm.expect(jsonData.Division_Financial_Dimension__c).to.eql(DivisionFinDim);",
							"   });",
							"console.log(\"Session Division Financial Dimensions from PF (taken from course Region in PF):\", DivisionFinDim);",
							"console.log(\"Session Division Financial Dimensions in SF:\", jsonData.Division_Financial_Dimension__c); ",
							"",
							"pm.test(\"Session Product Financial Dimensions match\", function () {",
							"    pm.expect(jsonData.Product_Financial_Dimension__c).to.eql(ProductFinDim);",
							"   });",
							"console.log(\"Session Product Financial Dimensions from PF (taken from course Body in PF):\", ProductFinDim);",
							"console.log(\"Session Product Financial Dimensions in SF:\", jsonData.Product_Financial_Dimension__c);",
							"",
							"pm.test(\"Session Project Financial Dimensions match\", function () {",
							"    pm.expect(jsonData.Project_Financial_Dimension__c).to.eql(ProjectFinDim);",
							"   });",
							"console.log(\"Session Project Financial Dimensions from PF (taken from course Course Type in PF):\", ProjectFinDim);",
							"console.log(\"Session Project Financial Dimensions in SF:\", jsonData.Project_Financial_Dimension__c); ",
							"",
							"let clienttag = new Array();",
							"clienttag = pm.environment.get(\"Clients\"); ",
							"if (clienttag.length === 0){",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(null);",
							"    });",
							"    console.log(\"No specific Client for Session Parent course\");",
							"}",
							"else {",
							"    var i;",
							"    var lengC = \"\";",
							"        for (i=0; i<clienttag.length; i++){",
							"        lengC += clienttag[i];",
							"        lengC += \", \";",
							"        }",
							"    pm.test(\"Clients tag test\", function () {",
							"    pm.expect(jsonData.Client_Tags__c).to.eql(lengC.slice(0,-2));",
							"    });",
							"    console.log(\"Session Clients from PF:\", lengC.slice(0,-2));",
							"    console.log(\"Session Clients in SF:\", jsonData.Client_Tags__c);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/Product2/{{Prod2Session}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find PriceEntry PS v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var SessPrice = 0;",
							"var Price = pm.environment.get(\"Course price\");",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\");",
							"var ProdSessIn = pm.environment.get(\"ProdSessIn\");",
							"Price = Price*100;",
							"var yyy = (+Price%NumberOfSession);",
							"if (yyy > 0){",
							"    var pr = Price - yyy;",
							"    if (ProdSessIn === 1){",
							"        SessPrice = pr/NumberOfSession + yyy;",
							"    }",
							"    else {",
							"    SessPrice = pr/NumberOfSession;",
							"    }",
							"}",
							"else {SessPrice = Price/NumberOfSession}",
							"SessPrice = SessPrice/100;",
							"SessPrice = parseFloat(SessPrice.toFixed(2));",
							"pm.test(\"Price match\", function() {",
							"    pm.expect(jsonData.records[0].UnitPrice).to.eql(SessPrice);",
							"    });",
							"console.log(\"Session price from SF:\", jsonData.records[0].UnitPrice);",
							"console.log(\"Expected price:\", SessPrice);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id,Name,UnitPrice,IsActive,Pricebook2Id,Product2Id FROM PricebookEntry where Product2Id='{{Prod2Session}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id,Name,UnitPrice,IsActive,Pricebook2Id,Product2Id FROM PricebookEntry where Product2Id='{{Prod2Session}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SoQL to find ProdOptS v2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var ProdOptSessID = jsonData.records[0].Id;",
							"pm.environment.set(\"ProdOptSessID\", ProdOptSessID);",
							"",
							"var matQTY = pm.environment.get(\"matQTY\");",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\");",
							"let SBQQnumSess = new Array();",
							"for (i = 1; i <= NumberOfSession; i++) {",
							"    SBQQnumSess.push(i * 10);",
							"}",
							"pm.environment.unset(\"SBQQnumSess\");",
							"pm.environment.set(\"SBQQnumSess\", SBQQnumSess);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__OptionalSKU__c= '{{Prod2Session}}' and  SBQQ__Feature__c ='{{SF_P_feature_id_S}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom SBQQ__ProductOption__c\nwhere  SBQQ__OptionalSKU__c= '{{Prod2Session}}' and  SBQQ__Feature__c ='{{SF_P_feature_id_S}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProdOptSess test v2.0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var SF_course_id = pm.environment.get(\"SF_course_id\"); ",
							"var Prod2Session = pm.environment.get(\"Prod2Session\"); ",
							"var SF_P_feature_id_S = pm.environment.get(\"SF_P_feature_id_S\");",
							"var SBQQnumSess = pm.environment.get(\"SBQQnumSess\");",
							"var ProdSessIn = pm.environment.get(\"ProdSessIn\"); ",
							"pm.test(\"Session Product Option Number match\", function() {",
							"    pm.expect(jsonData.SBQQ__Number__c).to.eql(SBQQnumSess[+ProdSessIn - 1]);",
							"});",
							"console.log(\"Session Product Option Number geerated by Middleware:\", SBQQnumSess[+ProdSessIn - 1])",
							"console.log(\"Session Product Option Number in SF:\", jsonData.SBQQ__Number__c)",
							"",
							"pm.test(\"Session Product Option Quantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__Quantity__c).to.eql(1);",
							"});",
							"console.log(\"Session Product Option Quantity in SF (always '1' for session option):\", jsonData.SBQQ__Quantity__c)",
							"",
							"pm.test(\"Session Product Option QuantityEditable match\", function () {",
							"     pm.expect(jsonData.SBQQ__QuantityEditable__c).to.be.true;",
							"});",
							"console.log(\"Session Product Option QuantityEditable, set to TRUE by Middleware, in SF:\", jsonData.SBQQ__QuantityEditable__c)",
							"",
							"pm.test(\"Session Product Option Selected__c match\", function () {",
							"     pm.expect(jsonData.SBQQ__Selected__c).to.be.true;",
							"});",
							"console.log(\"Session Product Option Selected, set to TRUE by Middleware, in SF:\", jsonData.SBQQ__Selected__c)",
							"",
							"pm.test(\"Session Product Option Required__c match\", function () {",
							"     pm.expect(jsonData.SBQQ__Required__c).to.be.false;",
							"});",
							"console.log(\"Session Product Option Selected, set to FALSE by Middleware, in SF:\", jsonData.SBQQ__Required__c)",
							"",
							"pm.test(\"Session Product Option MinQuantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__MinQuantity__c).to.eql(null);",
							"});",
							"console.log(\"Session Product Option MinQuantity, set to 'null' by Middleware, in SF:\", jsonData.SBQQ__MinQuantity__c)",
							"",
							"pm.test(\"Session Product Option MaxQuantity match\", function() {",
							"    pm.expect(jsonData.SBQQ__MaxQuantity__c).to.eql(null);",
							"});",
							"console.log(\"Session Product Option MaxQuantity, set to 'null' by Middleware, in SF:\", jsonData.SBQQ__MaxQuantity__c)",
							"",
							"",
							"pm.test(\"Session Product Option ConfiguredSKU match\", function() {",
							"    pm.expect(jsonData.SBQQ__ConfiguredSKU__c).to.eql(SF_course_id);",
							"});",
							"console.log(\"ConfiguredSKU, Parent Course SF Id:\", SF_course_id)",
							"console.log(\"Session Product Option ConfiguredSKU in SF:\", jsonData.SBQQ__ConfiguredSKU__c)",
							"",
							"pm.test(\"Session Product Option OptionalSKU match\", function() {",
							"    pm.expect(jsonData.SBQQ__OptionalSKU__c).to.eql(Prod2Session);",
							"});",
							"console.log(\"OptionalSKU, Related Session product SF Id:\", Prod2Session)",
							"console.log(\"Session Product Option OptionalSKU in SF:\", jsonData.SBQQ__OptionalSKU__c)",
							"",
							"pm.test(\"Session Product Option FeatureID match\", function() {",
							"    pm.expect(jsonData.SBQQ__Feature__c).to.eql(SF_P_feature_id_S);",
							"});",
							"console.log(\"Parent Course session feature SF Id:\", SF_P_feature_id_S)",
							"console.log(\"Session Product Option Feature in SF:\", jsonData.SBQQ__Feature__c)",
							"",
							"pm.test(\"Session Product Option Type match\", function() {",
							"    pm.expect(jsonData.SBQQ__Type__c).to.eql(\"Related Product\");",
							"});",
							"console.log(\"Session Product Option Type (always 'Related Product') in SF:\", jsonData.SBQQ__Type__c)",
							"",
							"var NumberOfSession = pm.environment.get(\"NumberOfSession\");",
							"ProdSessIn = +ProdSessIn + 1;",
							"pm.environment.unset(\"ProdSessIn\");",
							"pm.environment.set(\"ProdSessIn\", ProdSessIn);",
							"if (ProdSessIn <= NumberOfSession){",
							"    postman.setNextRequest(\"SoQL to find Product for session v2.0\");",
							"    console.log(\"Finished with current session, proceed to next session\");",
							"}",
							"else {",
							"    postman.setNextRequest(\"Course fields from PF for Totara\");",
							"    console.log(\"No more session to test, proceed to next step\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/SBQQ__ProductOption__c/{{ProdOptSessID}}"
			},
			"response": []
		},
		{
			"name": "Course fields from PF for Totara",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody) \r",
							"var TotDigCon = jsonData.data.courses.result[0].digitalContent.reference;\r",
							"pm.environment.set(\"TotDigCon\", TotDigCon);\r",
							"if (jsonData.data.courses.result[0].digitalContent.nameSuffix.length != 0){\r",
							"    var TotCourseName = jsonData.data.courses.result[0].digitalContent.name + \" \" + \"-\" + \" \" + jsonData.data.courses.result[0].digitalContent.nameSuffix}\r",
							"else {var TotCourseName = jsonData.data.courses.result[0].digitalContent.name};\r",
							"pm.environment.set(\"TotCourseName\", TotCourseName);\r",
							"\r",
							"var NumOfCombinations = jsonData.data.courses.result[0].digitalContent.combinations.length;\r",
							"pm.environment.set(\"NumOfCombinations\", NumOfCombinations)\r",
							"\r",
							"var NumOfSittings = 0;\r",
							"for (i = 0; i<jsonData.data.courses.result[0].digitalContent.combinations.length; i++){\r",
							"NumOfSittings += jsonData.data.courses.result[0].digitalContent.combinations[i].sittings.length}\r",
							"\r",
							"let PFCourseSitStartDates = new Array();\r",
							"let PFCourseSitEndDates = new Array();\r",
							"\r",
							"for (i=0; i < jsonData.data.courses.result[0].digitalContent.combinations.length; i++)\r",
							"    for (j = 0; j<jsonData.data.courses.result[0].digitalContent.combinations[i].sittings.length; j++) {\r",
							"        PFCourseSitStartDates.push(jsonData.data.courses.result[0].digitalContent.combinations[i].sittings[j].startDate);\r",
							"        PFCourseSitEndDates.push(jsonData.data.courses.result[0].digitalContent.combinations[i].sittings[j].endDate)\r",
							"    };\r",
							"\r",
							"PFCourseSitStartDates.sort();\r",
							"var TotCourseStartDate = PFCourseSitStartDates[0];\r",
							"pm.environment.set(\"TotCourseStartDate\", TotCourseStartDate);\r",
							"PFCourseSitEndDates.sort();\r",
							"PFCourseSitEndDates.reverse();\r",
							"var TotCourseEndDate = PFCourseSitEndDates[0];\r",
							"pm.environment.set(\"TotCourseEndDate\", TotCourseEndDate)\r",
							"\r",
							"var BodyCatName = jsonData.data.courses.result[0].digitalContent.combinations[0].body.name;\r",
							"var BodyCatRef = jsonData.data.courses.result[0].digitalContent.combinations[0].body.reference;\r",
							"var LevelCatName = jsonData.data.courses.result[0].digitalContent.combinations[0].level.name;\r",
							"var LevelCatRef = jsonData.data.courses.result[0].digitalContent.combinations[0].level.reference;\r",
							"var PaperCatId = \"PF_SCH_1_HARD_CODED/\";\r",
							"var PaperCatName = \"Professional Qualifications\";\r",
							"\r",
							"pm.environment.set(\"BodyCatName\", BodyCatName);\r",
							"pm.environment.set(\"BodyCatRef\", BodyCatRef);\r",
							"pm.environment.set(\"LevelCatName\", LevelCatName);\r",
							"pm.environment.set(\"LevelCatRef\", LevelCatRef);\r",
							"pm.environment.set(\"PaperCatId\", PaperCatId);\r",
							"pm.environment.set(\"PaperCatName\", PaperCatName);\r",
							"\r",
							"//function courseTypeCheck checks does the course type has dash in name (it has an effect on group naming)\r",
							"var SitName = pm.environment.get(\"SittingName\");\r",
							"function courseTypeCheck (coursetypevalue){\r",
							"        var dashishere = coursetypevalue.indexOf(\" - \");\r",
							"        if (dashishere != -1){\r",
							"            var numberOfdashes = coursetypevalue.split(' - ').length;\r",
							"            let coursetypeparts = new Array();\r",
							"            for (i = 0; i < numberOfdashes; i++){\r",
							"                coursetypeparts.push(coursetypevalue.split(' - ')[i]);\r",
							"            }\r",
							"            return coursetypeparts;\r",
							"            }\r",
							"        return false\r",
							"    }\r",
							"\r",
							"//function courseTypeWithSpaces checks does the course type has space in name (it has an effect on group naming)\r",
							"function courseTypeWithSpaces(coursetypevalue){\r",
							"    var spacePresent = coursetypevalue.indexOf(\" \");\r",
							"    if (spacePresent !== -1){\r",
							"        var numberOfspaces = coursetypevalue.split(' ').length;\r",
							"        let coursetypesparts = new Array();\r",
							"        for (i=0; i<numberOfspaces; i++){\r",
							"            coursetypesparts.push(coursetypevalue.split(' ')[i])\r",
							"        }\r",
							"        var firstpartgruopname = \"\";\r",
							"            for (i=0; i < coursetypesparts.length; i++){\r",
							"                firstpartgruopname += coursetypesparts[i].slice(0,5) + \" \";\r",
							"                }\r",
							"        firstpartgruopname = firstpartgruopname.slice(0,-1);\r",
							"    }\r",
							"    else {\r",
							"        firstpartgruopname = coursetypevalue.slice(0,5)\r",
							"    }\r",
							"    return firstpartgruopname;\r",
							"}\r",
							"\r",
							"//function locationpartcut perform location name to be used in group naming (bussines requirements)\r",
							"function locationpartcut(locname){\r",
							"        var numberOfspaces = locname.split(' ').length;\r",
							"        let loccuttednames = new Array();\r",
							"        let x = new Array();\r",
							"        if (numberOfspaces > 0){\r",
							"            for (i=0; i<numberOfspaces; i++){\r",
							"                loccuttednames.push(locname.split(' ')[i]);\r",
							"                x.push(loccuttednames[i].slice(0,3));\r",
							"                }\r",
							"            var cuttedlocnamestr = \"\";\r",
							"            for (i=0; i < x.length; i++){\r",
							"                cuttedlocnamestr += x[i] + \" \";\r",
							"                }\r",
							"            cuttedlocnamestr = cuttedlocnamestr.slice(0,-1);\r",
							"            return cuttedlocnamestr;\r",
							"        }\r",
							"        else {return locname.slice(0,3)}\r",
							"    }\r",
							"\r",
							"//function TotGroupGenarator generates Totara course groups names from all data above\r",
							"function TotGroupGenarator (courseType,startDate,locationName,stream,GUID,SitName){\r",
							"    var coursetypepartsarray = courseTypeCheck(courseType);\r",
							"    var TotaraGroupName;\r",
							"    if (courseTypeCheck(courseType) != false && stream != null) {\r",
							"        var firstpart = coursetypepartsarray[0].slice(0,5)\r",
							"        var lastpart = coursetypepartsarray[coursetypepartsarray.length - 1].slice(0,5)\r",
							"        TotaraGroupName = firstpart+sep+startDate+sep+locationpartcut(locationName)+sep+lastpart+sep+SitName+sep+stream+sep+GUID;\r",
							"    }   \r",
							"    else if (courseTypeCheck(courseType) != false && stream === null) {\r",
							"        var firstpart = coursetypepartsarray[0].slice(0,5)\r",
							"        var lastpart = coursetypepartsarray[coursetypepartsarray.length - 1].slice(0,5)\r",
							"        TotaraGroupName = firstpart+sep+startDate+sep+locationpartcut(locationName)+sep+lastpart+sep+SitName+sep+GUID;\r",
							"    }\r",
							"    else if (courseTypeCheck(courseType) === false && stream != null) {\r",
							"        var cuttedcoursetype = courseTypeWithSpaces(courseType);\r",
							"        TotaraGroupName = cuttedcoursetype+sep+startDate+sep+locationpartcut(locationName)+sep+SitName+sep+stream+sep+GUID;\r",
							"    }\r",
							"    else if (courseTypeCheck(courseType) === false && stream === null) {\r",
							"        var cuttedcoursetype = courseTypeWithSpaces(courseType);\r",
							"        TotaraGroupName = cuttedcoursetype+sep+startDate+sep+locationpartcut(locationName)+sep+SitName+sep+GUID;\r",
							"    }\r",
							"    return TotaraGroupName\r",
							"}\r",
							"\r",
							"let TotGroupsNames = new Array();\r",
							"var courseType = pm.environment.get(\"CourseType\");\r",
							"var sep = \" - \";\r",
							"var arr = pm.environment.get(\"arr\");\r",
							"\r",
							"for (j = 0; j < arr; j++){\r",
							"    var startDate = jsonData.data.courses.result[0].instances[j].startDate;\r",
							"    var moment = require('moment');\r",
							"    var startDate = moment(startDate).format(\"YY-MM-DD\");\r",
							"    var locationName = jsonData.data.courses.result[0].instances[j].defaultLocation.name;\r",
							"    var stream;\r",
							"    if (jsonData.data.courses.result[0].instances[j].stream === null) {stream = null}\r",
							"    else {stream = jsonData.data.courses.result[0].instances[j].stream.name}\r",
							"    var GUID = jsonData.data.courses.result[0].instances[j].reference;\r",
							"    TotGroupsNames.push(TotGroupGenarator(courseType,startDate,locationName,stream,GUID,SitName));\r",
							"}\r",
							"pm.environment.set(\"TotGroupsNames\", TotGroupsNames);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{courses(reference: \"{{PF_reference}}\"){\r\n    result{\r\n        digitalContent { \r\n            reference\r\n            name\r\n            nameSuffix\r\n            combinations{\r\n                body{\r\n                    name\r\n                    reference\r\n                    shortName\r\n                }\r\n                level{\r\n                    name\r\n                    reference\r\n                    shortName\r\n                }\r\n                paper{\r\n                    description\r\n                    reference\r\n                }\r\n                sittings{\r\n                    reference\r\n                    name\r\n                    startDate\r\n                    endDate}\r\n                courseTypes{\r\n                    description\r\n                    reference\r\n                }\r\n            }\r\n        }\r\n        instances {\r\n            defaultLocation { \r\n                name\r\n                reference\r\n                addressLine1\r\n                addressLine2\r\n                addressLine3\r\n                countryCode\r\n                city\r\n                postcode\r\n                region {name}\r\n            }\r\n            defaultSessionDuration { description }\r\n        reference\r\n        startDate\r\n        stream {name}\r\n        status\r\n            sessions {\r\n                startDate\r\n                endDate\r\n                location {name}\r\n                timings {\r\n                    sessionDate\r\n                    startTime\r\n                    endTime\r\n                    }\r\n            }\r\n        }\r\n    }\r\n}\r\n}",
						"variables": ""
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "Totara get course by digCon",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var TotCourseEndDate = pm.environment.get(\"TotCourseEndDate\"); ",
							"var TotCourseStartDate = pm.environment.get(\"TotCourseStartDate\");",
							"var TotCourseName = pm.environment.get(\"TotCourseName\"); ",
							"",
							"var x = jsonData.courses[0].startdate;",
							"var y = jsonData.courses[0].enddate;",
							"var moment = require('moment');",
							"var courseStartDate = moment(x * 1000).format(\"YYYY-MM-DD\");",
							"var courseEndDate = moment(y * 1000).format(\"YYYY-MM-DD\");",
							"",
							"pm.test(\"Course End Date match\", function () {",
							"    pm.expect(courseEndDate).to.eql(TotCourseEndDate);",
							"   });",
							"console.log(\"Course End Date from PF:\", TotCourseEndDate)",
							"console.log(\"Course End Date in Totara:\", courseEndDate)",
							"",
							"pm.test(\"Course Start Date match\", function () {",
							"    pm.expect(courseStartDate).to.eql(TotCourseStartDate);",
							"   });",
							"console.log(\"Course Start Date from PF:\", courseStartDate)",
							"console.log(\"Course Start Date in Totara:\", TotCourseStartDate)",
							"",
							"pm.test(\"Course full name match\", function () {",
							"    pm.expect(jsonData.courses[0].fullname).to.eql(TotCourseName);",
							"   });",
							"console.log(\"Course full name from PF:\", TotCourseName)",
							"console.log(\"Course full name in Totara:\", jsonData.courses[0].fullname)",
							"",
							"pm.test(\"Course short name match\", function () {",
							"    pm.expect(jsonData.courses[0].shortname).to.eql(TotCourseName);",
							"   });",
							"console.log(\"Course short name from PF:\", TotCourseName)",
							"console.log(\"Course short name in Totara:\", jsonData.courses[0].shortname)",
							"",
							"var visibility = jsonData.courses[0].visible;",
							"if (visibility === 0){",
							"    console.warn(\"Course Hide!!!\")",
							"    pm.test(\"Course is Hide\", function () {",
							"    pm.expect(jsonData.courses[0].visible).to.eql(0);",
							"    });",
							"    console.log(\"Course is Hide in Totara\")",
							"}",
							"    else {",
							"        pm.test(\"Course is Show\", function () {",
							"        pm.expect(jsonData.courses[0].visible).to.eql(1);",
							"    });",
							"    console.log(\"Course is Show in Totara\")",
							"}",
							"var TotCourseID = jsonData.courses[0].id;",
							"console.log(\"Totara course Id:\", TotCourseID);",
							"pm.environment.set(\"TotCourseID\", TotCourseID);",
							"var LevId = jsonData.courses[0].categoryid;",
							"pm.environment.set(\"LevId\", LevId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_course_get_courses_by_field&field=idnumber&value={{TotDigCon}}",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_course_get_courses_by_field"
						},
						{
							"key": "field",
							"value": "idnumber"
						},
						{
							"key": "value",
							"value": "{{TotDigCon}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Totara get groups from course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var arr = pm.environment.get(\"arr\"); ",
							"var instanceRef = pm.environment.get(\"refM\");",
							"var TotaraGroupsNames = pm.environment.get(\"TotGroupsNames\");",
							"console.log(TotaraGroupsNames)",
							"if (jsonData.length > arr) {",
							"    console.log(\"Totara course include more then 1 PF and SF course\")};",
							"",
							"let TotGroupId = new Array();",
							"for (i = 0; i < jsonData.length; i++) {",
							"    TotGroupId.push(jsonData[i].idnumber)",
							"}",
							"console.log(TotGroupId)",
							"let InstanceRefIndex = new Array();",
							"for (i = 0; i < arr; i++){",
							"    var PFInstanceRef = TotGroupId.indexOf(instanceRef[i]);",
							"    InstanceRefIndex.push(PFInstanceRef)",
							"}",
							"console.log(InstanceRefIndex)",
							"",
							"for (i = 0; i < arr; i++){",
							"    pm.test(\"Totara Group Name match\", function () {",
							"        pm.expect(jsonData[InstanceRefIndex[i]].name).to.eql(TotaraGroupsNames[i]);",
							"        console.log(\"Course group name generated by Middleware from PF data:\", TotaraGroupsNames[i]);",
							"        console.log(\"Course group name in Totara:\", jsonData[InstanceRefIndex[i]].name)",
							"    });",
							"    pm.test(\"Totara description format match\", function () {",
							"        pm.expect(jsonData[InstanceRefIndex[i]].descriptionformat).to.eql(1);",
							"    console.log(\"Totara group descriptionformat ('1' is expected):\", jsonData[InstanceRefIndex[i]].descriptionformat);",
							"    });",
							"    pm.test(\"PF to Totara group reference match\", function () {",
							"        pm.expect(jsonData[InstanceRefIndex[i]].idnumber).to.eql(instanceRef[i]);",
							"    console.log(\"Totara group references:\", jsonData[InstanceRefIndex[i]].idnumber);",
							"    console.log(\"Instance references from PF:\", instanceRef[i]);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_group_get_course_groups&courseid={{TotCourseID}}",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_group_get_course_groups"
						},
						{
							"key": "courseid",
							"value": "{{TotCourseID}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Totara get all course category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var lenMas = jsonData.length;",
							"let idMas = new Array();",
							"for (i=0; i<lenMas; i++){",
							"    idMas.push(jsonData[i].id);",
							"}",
							"var NumOfCombinations = pm.environment.get(\"NumOfCombinations\");",
							"var LevId = pm.environment.get(\"LevId\");",
							"var sharedIndex = idMas.indexOf(LevId);",
							"console.log('Number of Combinations in PF:', NumOfCombinations);",
							"if (LevId = 332 && NumOfCombinations > 1){",
							"    pm.test(\"Totara Course set under '/SHARED' category\", function () {",
							"        pm.expect(jsonData[sharedIndex].idnumber).to.eql(\"SHARED/330/\");",
							"        console.warn(\"Course under the Shared category!\");",
							"        });",
							"    }",
							"else{",
							"    var LevId = pm.environment.get(\"LevId\");",
							"    var indexLev = idMas.indexOf(LevId);",
							"    var BodyId = jsonData[indexLev].parent;",
							"    var indexBod = idMas.indexOf(BodyId);",
							"    var HardcodedId = jsonData[indexBod].parent;",
							"    console.log('Paper category Id (hardcoded, used same for all courses):', HardcodedId);",
							"    var indexPap = idMas.indexOf(HardcodedId);",
							"    var PaperCatId = pm.environment.get(\"PaperCatId\"); ",
							"    var PaperCatName = pm.environment.get(\"PaperCatName\");",
							"    pm.test(\"Totara Paper category idnumber match\", function () {",
							"        pm.expect(jsonData[indexPap].idnumber).to.eql(PaperCatId);",
							"        });",
							"    console.log('Totara Paper category ID:', jsonData[indexPap].idnumber);",
							"    console.log('Totara Paper category ID expected:', PaperCatId);",
							"    ",
							"    pm.test(\"Totara Paper category name match\", function () {",
							"        pm.expect(jsonData[indexPap].name).to.eql(PaperCatName);",
							"        });",
							"    console.log('Totara Paper category Name:', jsonData[indexPap].name);",
							"    console.log('Totara Paper category Name expected:', PaperCatName);",
							"",
							"    pm.test(\"Totara Paper parent category match\", function () {",
							"        pm.expect(jsonData[indexPap].parent).to.eql(0);",
							"        });",
							"    pm.test(\"Totara Paper category depth match\", function () {",
							"        pm.expect(jsonData[indexPap].depth).to.eql(1);",
							"        });",
							"    var path = \"/\" + HardcodedId;",
							"    pm.test(\"Totara Paper category path match\", function () {",
							"        pm.expect(jsonData[indexPap].path).to.eql(path);",
							"        });",
							"    console.log('Totara Paper category path:', jsonData[indexPap].path);",
							"        ",
							"    var BodyCatRef = pm.environment.get(\"BodyCatRef\"); ",
							"    var BodyCatName = pm.environment.get(\"BodyCatName\");",
							"    pm.test(\"Totara Body category idnumber match\", function () {",
							"        pm.expect(jsonData[indexBod].idnumber).to.eql(BodyCatRef + \"/\" + HardcodedId +\"/\");",
							"        });",
							"    console.log('Totara Body category ID:', jsonData[indexBod].idnumber);",
							"    console.log('Totara Body category ID expected:', BodyCatRef + \"/\" + HardcodedId +\"/\");",
							"",
							"    pm.test(\"Totara Body category name match\", function () {",
							"        pm.expect(jsonData[indexBod].name).to.eql(BodyCatName);",
							"        });",
							"    console.log('Totara Body category Name:', jsonData[indexBod].name);",
							"    console.log('Totara Body category Name expected:', BodyCatName);",
							"",
							"    pm.test(\"Totara Body parent category match\", function () {",
							"        pm.expect(jsonData[indexBod].parent).to.eql(HardcodedId);",
							"        });",
							"    pm.test(\"Totara Body category depth match\", function () {",
							"        pm.expect(jsonData[indexBod].depth).to.eql(2);",
							"        });",
							"    var path = \"/\" + HardcodedId + \"/\" + BodyId;",
							"    pm.test(\"Totara Body category path match\", function () {",
							"        pm.expect(jsonData[indexBod].path).to.eql(path);",
							"        });",
							"    console.log('Totara Body category path:', jsonData[indexBod].path);",
							"",
							"    var LevelCatRef = pm.environment.get(\"LevelCatRef\"); ",
							"    var LevelCatName = pm.environment.get(\"LevelCatName\");",
							"    pm.test(\"Totara Level category idnumber match\", function () {",
							"        pm.expect(jsonData[indexLev].idnumber).to.eql(LevelCatRef + \"/\" + HardcodedId + \"/\" + BodyId +\"/\");",
							"        });",
							"    console.log('Totara Level category ID:', jsonData[indexLev].idnumber);",
							"    console.log('Totara Level category ID expected:', LevelCatRef + \"/\" + HardcodedId + \"/\" + BodyId +\"/\");",
							"",
							"    pm.test(\"Totara Level category name match\", function () {",
							"        pm.expect(jsonData[indexLev].name).to.eql(LevelCatName);",
							"        });",
							"    console.log('Totara Level category Name:', jsonData[indexLev].name);",
							"    console.log('Totara Level category Name expected:', LevelCatName);",
							"",
							"    pm.test(\"Totara Level parent category match\", function () {",
							"        pm.expect(jsonData[indexLev].parent).to.eql(BodyId);",
							"        });",
							"    pm.test(\"Totara Level category depth match\", function () {",
							"        pm.expect(jsonData[indexLev].depth).to.eql(3);",
							"        });",
							"    var path = \"/\" + HardcodedId + \"/\" + BodyId + \"/\" + LevId;",
							"    pm.test(\"Totara Level category path match\", function () {",
							"        pm.expect(jsonData[indexLev].path).to.eql(path);",
							"        });",
							"    console.log('Totara Level category path:', jsonData[indexLev].path);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_course_get_categories",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_course_get_categories"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}
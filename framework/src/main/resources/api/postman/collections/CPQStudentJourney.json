{
	"info": {
		"_postman_id": "b2c0355c-0c30-4ed1-b914-4663497da6a5",
		"name": "CPQ student journey",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Token for SF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"qa_sf_graph_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://test.salesforce.com/services/oauth2/token?grant_type=password&client_id={{SFclient_idForToken}}&client_secret={{SFclient_secretForToken}}&username={{SFusernameForToken}}&password={{SFpasswordForToken}}",
					"protocol": "https",
					"host": [
						"test",
						"salesforce",
						"com"
					],
					"path": [
						"services",
						"oauth2",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "password"
						},
						{
							"key": "client_id",
							"value": "{{SFclient_idForToken}}"
						},
						{
							"key": "client_secret",
							"value": "{{SFclient_secretForToken}}"
						},
						{
							"key": "username",
							"value": "{{SFusernameForToken}}"
						},
						{
							"key": "password",
							"value": "{{SFpasswordForToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var InsSFId = jsonData.Instance__c;",
							"pm.environment.set(\"InsSFId\", InsSFId);",
							"var StudSFId = jsonData.Student__c;",
							"pm.environment.set(\"StudSFId\", StudSFId);",
							"pm.test(\"Check if status Confirmed\", function () {",
							"    pm.expect(jsonData.Status__c).to.eql(\"Confirmed\");",
							"});",
							"console.log(\"Confirm that Student Booking was successfully submitted and status set to 'Confirmed':\", jsonData.Status__c);",
							"var ActivatedOn = jsonData.CreatedDate;",
							"var moment = require('moment');",
							"var ActOnUnix = moment(ActivatedOn).format(\"x\");",
							"pm.environment.set(\"ActOnUnix\", ActOnUnix);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Booking__c/{{BookingSFId}}"
			},
			"response": []
		},
		{
			"name": "SF Ins info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var CourseSFId = jsonData.Product__c;",
							"pm.environment.set(\"CourseSFId\", CourseSFId);",
							"var InsStartDate = jsonData.Start_Date__c;",
							"var moment = require('moment');",
							"var InsStartUnix = moment(InsStartDate).format(\"x\");",
							"pm.environment.set(\"InsStartUnix\", InsStartUnix);",
							"var InstanceLoc = jsonData.Location__c;",
							"pm.environment.set(\"InstanceLoc\", InstanceLoc);",
							"var PFInstanceRef = jsonData.Instance_ID__c;",
							"pm.environment.set(\"PFInstanceRef\", PFInstanceRef);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{SFpublicURL}}/sobjects/Instance__c/{{InsSFId}}"
			},
			"response": []
		},
		{
			"name": "Student info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var FullName = jsonData.Name;",
							"var FirstName = jsonData.FirstName;",
							"var LastName = jsonData.LastName;",
							"var StudEmail = jsonData.PersonEmail;",
							"var PhoneNum = jsonData.Phone;",
							"",
							"pm.environment.set(\"FullName\", FullName);",
							"pm.environment.set(\"FirstName\", FirstName);",
							"pm.environment.set(\"LastName\", LastName);",
							"pm.environment.set(\"StudEmail\", StudEmail);",
							"pm.environment.set(\"PhoneNum\", PhoneNum);",
							"",
							"console.log(\"SF student Full name:\", FullName);",
							"console.log(\"SF student Email:\", StudEmail);",
							"console.log(\"SF student phone number:\", PhoneNum);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Account/{{StudSFId}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find HUB account object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var HUBaccID = jsonData.records[0].Id;\r",
							"pm.environment.set(\"HUBaccID\", HUBaccID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Hub_Account__c\nwhere  Student__c = '{{StudSFId}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Hub_Account__c\nwhere  Student__c = '{{StudSFId}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Student HUB account object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var StudEmail = pm.environment.get(\"StudEmail\");",
							"StudAuth0Id = jsonData.Auth0_Id__c; ",
							"var TempLastLogin = jsonData.Last_Logged_In__c",
							"if (TempLastLogin !== null){",
							"    var moment = require('moment');",
							"    var LastLogin = moment(TempLastLogin).format(\"YYYY-MM-DD\"); ",
							"}",
							"else {var LastLogin = null}",
							"pm.environment.set(\"LastLogin\", LastLogin);",
							"pm.environment.set(\"StudAuth0Id\", StudAuth0Id);",
							"",
							"pm.test(\"Check HUB username value\", function () {",
							"    pm.expect(jsonData.Hub_Username__c).to.eql(StudEmail);",
							"});",
							"",
							"console.log(\"Last Login into Hub:\", LastLogin);",
							"console.log(\"Auth0 Student Id:\", StudAuth0Id);",
							"pm.environment.set(\"SFtaskIn\", 0)",
							"pm.environment.set(\"Auth0taskIn\", 0);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Hub_Account__c/{{HUBaccID}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var SFtaskIn = pm.environment.get(\"SFtaskIn\");\r",
							"console.log(SFtaskIn)\r",
							"if(jsonData.totalSize == 0 && SFtaskIn <= 20){\r",
							"    postman.setNextRequest(\"SoQL to find Task\");\r",
							"    setTimeout(() => {}, 2000);\r",
							"    SFtaskIn = +SFtaskIn + 1;\r",
							"    pm.environment.set(\"SFtaskIn\", SFtaskIn);\r",
							"}\r",
							"else if(jsonData.totalSize == 0 && SFtaskIn > 20){\r",
							"    postman.setNextRequest(\"Field test in SF Task\");\r",
							"    console.error(\"No SF Task was found\")\r",
							"}\r",
							"else{\r",
							"    var TaskId = jsonData.records[0].Id;\r",
							"    pm.environment.set(\"TaskId\", TaskId);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Task\nwhere  AccountId = '{{StudSFId}}' and Type = 'Registration' and OwnerId = '005g000000728tSAAQ'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Task\nwhere  AccountId = '{{StudSFId}}' and Type = 'Registration' and OwnerId = '005g000000728tSAAQ'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Field test in SF Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var StudentAccountId = pm.environment.get(\"StudSFId\");\r",
							"pm.test(\"Check Subject value\", function () {\r",
							"    pm.expect(jsonData.Subject).to.eql(\"Welcome to The Hub, your new learning environment\");\r",
							"});\r",
							"console.log(\"Task subject set by Middleware ('Welcome to The Hub, your new learning environment'), on SF:\", jsonData.Subject);\r",
							"\r",
							"pm.test(\"Check Task Type\", function () {\r",
							"    pm.expect(jsonData.Type).to.eql(\"Registration\");\r",
							"});\r",
							"console.log(\"Task Type set by Middleware ('Registration'), on SF:\", jsonData.Type);\r",
							"\r",
							"pm.test(\"Check Account Id related to Task\", function () {\r",
							"    pm.expect(jsonData.AccountId).to.eql(StudentAccountId);\r",
							"});\r",
							"console.log(\"Student account in SF:\", StudentAccountId);\r",
							"console.log(\"Task related to Student account in SF:\", jsonData.AccountId);\r",
							"\r",
							"pm.test(\"Check Task Priority\", function () {\r",
							"    pm.expect(jsonData.Priority).to.eql(\"Normal\");\r",
							"});\r",
							"console.log(\"Task Priority set by Middleware ('Normal'), on SF:\", jsonData.Priority);\r",
							"\r",
							"pm.test(\"Check Task Status\", function () {\r",
							"    pm.expect(jsonData.Status).to.eql(\"Not Started\");\r",
							"});\r",
							"console.log(\"Task Status set by Middleware ('Not Started'), on SF:\", jsonData.Status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Task/{{TaskId}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find Auth event Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var Auth0taskIn = pm.environment.get(\"Auth0taskIn\");\r",
							"console.log(Auth0taskIn)\r",
							"if(jsonData.totalSize == 0 && Auth0taskIn <= 20){\r",
							"    postman.setNextRequest(\"SoQL to find Auth event Task\");\r",
							"    setTimeout(() => {}, 2000);\r",
							"    Auth0taskIn = Auth0taskIn + 1;\r",
							"    pm.environment.set(\"Auth0taskIn\", Auth0taskIn);\r",
							"}\r",
							"else if(jsonData.totalSize == 0 && Auth0taskIn > 20){\r",
							"    postman.setNextRequest(\"Field test in SF Auth event Task\");\r",
							"    console.error(\"No Auth0 Task was found\")\r",
							"}\r",
							"else{\r",
							"    var AuthEventTaskId = jsonData.records[0].Id;\r",
							"    pm.environment.set(\"AuthEventTaskId\", AuthEventTaskId)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom Task\nwhere  AccountId = '{{StudSFId}}' and Type = 'Registration' and OwnerId = '005g0000004jbZeAAI'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom Task\nwhere  AccountId = '{{StudSFId}}' and Type = 'Registration' and OwnerId = '005g0000004jbZeAAI'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Field test in SF Auth event Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var StudentAccountId = pm.environment.get(\"StudSFId\");\r",
							"pm.test(\"Check Subject value\", function () {\r",
							"    pm.expect(jsonData.Subject).to.eql(\"Learner Registered on Hub\");\r",
							"});\r",
							"console.log(\"Task subject set by Middleware ('Learner Registered on Hub'), on SF:\", jsonData.Subject);\r",
							"\r",
							"pm.test(\"Check Task Type\", function () {\r",
							"    pm.expect(jsonData.Type).to.eql(\"Registration\");\r",
							"});\r",
							"console.log(\"Task Type set by Middleware ('Registration'), on SF:\", jsonData.Type);\r",
							"\r",
							"pm.test(\"Check Account Id related to Task\", function () {\r",
							"    pm.expect(jsonData.AccountId).to.eql(StudentAccountId);\r",
							"});\r",
							"console.log(\"Student account in SF:\", StudentAccountId);\r",
							"console.log(\"Task related to Student account in SF:\", jsonData.AccountId);\r",
							"\r",
							"pm.test(\"Check Task Priority\", function () {\r",
							"    pm.expect(jsonData.Priority).to.eql(\"Normal\");\r",
							"});\r",
							"console.log(\"Task Priority set by Middleware ('Normal'), on SF:\", jsonData.Priority);\r",
							"\r",
							"pm.test(\"Check Task Status\", function () {\r",
							"    pm.expect(jsonData.Status).to.eql(\"Completed\");\r",
							"});\r",
							"console.log(\"Task Status set by Middleware ('Completed'), on SF:\", jsonData.Status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Task/{{AuthEventTaskId}}"
			},
			"response": []
		},
		{
			"name": "SoQL to find welcome email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"var WelcomeEmailId = jsonData.records[0].Id;\r",
							"pm.environment.set(\"WelcomeEmailId\", WelcomeEmailId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SFpublicURL}}/query/?q=SELECT Id\nFrom EmailMessage\nwhere  RelatedToId = '{{StudSFId}}'",
					"host": [
						"{{SFpublicURL}}"
					],
					"path": [
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id\nFrom EmailMessage\nwhere  RelatedToId = '{{StudSFId}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Field test in SF Welcome Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var StudentAccountEmail = pm.environment.get(\"StudEmail\");\r",
							"var StudentAccountId = pm.environment.get(\"StudSFId\");\r",
							"pm.test(\"Check Welcome mail copy Subject value\", function () {\r",
							"    pm.expect(jsonData.Subject).to.eql(\"Welcome to The Hub, your new learning environment\");\r",
							"});\r",
							"console.log(\"Welcome mail copy subject set by Middleware ('Welcome to The Hub, your new learning environment'), on SF:\", jsonData.Subject);\r",
							"\r",
							"pm.test(\"Check Welcome mail copy Type\", function () {\r",
							"    pm.expect(jsonData.attributes.type).to.eql(\"EmailMessage\");\r",
							"});\r",
							"console.log(\"Welcome mail copy Type set by Middleware ('EmailMessage'), on SF:\", jsonData.attributes.type);\r",
							"\r",
							"pm.test(\"Check Account Id related to Welcome mail copy\", function () {\r",
							"    pm.expect(jsonData.RelatedToId).to.eql(StudentAccountId);\r",
							"});\r",
							"console.log(\"Student account in SF:\", StudentAccountId);\r",
							"console.log(\"Task related to Student account in SF:\", jsonData.RelatedToId);\r",
							"\r",
							"pm.test(\"Check to Address\", function () {\r",
							"    pm.expect(jsonData.ToAddress).to.eql(StudentAccountEmail);\r",
							"});\r",
							"console.log(\"Student account email in SF:\", StudentAccountEmail);\r",
							"console.log(\"To Address in Welcome mail copy on Student account in SF:\", jsonData.ToAddress);\r",
							"\r",
							"pm.test(\"Check from Address\", function () {\r",
							"    pm.expect(jsonData.FromAddress).to.eql(\"hubwelcome-uat@bpp.com\");\r",
							"});\r",
							"console.log(\"From Address hardcoded on Middleware:\", \"hubwelcome-uat@bpp.com\");\r",
							"console.log(\"From Address in Welcome mail copy on Student account in SF:\", jsonData.FromAddress);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/EmailMessage/{{WelcomeEmailId}}"
			},
			"response": []
		},
		{
			"name": "SF course Info Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var PFcourseID = jsonData.BPP_ProductFactoryID__c;",
							"pm.environment.set(\"PFcourseID\", PFcourseID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{qa_sf_graph_token}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": "{{SFpublicURL}}/sobjects/Product2/{{CourseSFId}}"
			},
			"response": []
		},
		{
			"name": "Token for PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"pf_graph_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "audience",
							"value": "{{pf_auth0_token_audience}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "{{pf_auth0_token_grant_type}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{pf_auth0_token_client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{pf_auth0_token_client_secret}}",
							"type": "text"
						}
					]
				},
				"url": "{{pf_auth0_token_url}}"
			},
			"response": []
		},
		{
			"name": "Course data_from_PF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var digitCon = jsonData.data.courses.result[0].digitalContent.reference;",
							"pm.environment.set(\"digitCon\", digitCon);",
							"var CourseType = jsonData.data.courses.result[0].courseType.description;",
							"pm.environment.set(\"CourseType\", CourseType);",
							"var SitEndDate = jsonData.data.courses.result[0].sitting.endDate;",
							"var moment = require('moment');",
							"var SitEndUnix = moment(SitEndDate).format(\"x\");",
							"pm.environment.set(\"SitEndUnix\", SitEndUnix);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{pf_graph_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  courses(reference: \"{{PFcourseID}}\"){\r\n    result{\r\n    digitalContent { reference }\r\n    courseType { description }\r\n    sitting {\r\n      name\r\n      reference\r\n      startDate\r\n      endDate\r\n        }\r\n    }\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": "{{pf_graph_url}}graphql"
			},
			"response": []
		},
		{
			"name": "Totara get course by digitCon Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var CourseTotId = jsonData.courses[0].id;",
							"pm.environment.set(\"CourseTotId\", CourseTotId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_course_get_courses_by_field&field=idnumber&value={{digitCon}}",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_course_get_courses_by_field"
						},
						{
							"key": "field",
							"value": "idnumber"
						},
						{
							"key": "value",
							"value": "{{digitCon}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Totara's Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var TotUserId = jsonData[0].id;",
							"pm.environment.set(\"TotUserId\", TotUserId);",
							"var FullName = pm.environment.get(\"FullName\"); ",
							"var FirstName = pm.environment.get(\"FirstName\");",
							"var LastName = pm.environment.get(\"LastName\");",
							"var StudEmail = pm.environment.get(\"StudEmail\"); ",
							"pm.test(\"SF to Totara Full Name match\", function () {",
							"    pm.expect(jsonData[0].fullname).to.eql(FullName);",
							"   });",
							"console.log(\"Student Full Name from SF:\", FullName);",
							"console.log(\"Student Full Name in Totara:\", jsonData[0].fullname);",
							"",
							"pm.test(\"SF to Totara First Name match\", function () {",
							"    pm.expect(jsonData[0].firstname).to.eql(FirstName);",
							"   });",
							"console.log(\"Student First Name from SF:\", FirstName);",
							"console.log(\"Student First Namein Totara:\", jsonData[0].firstname);",
							"",
							"pm.test(\"SF to Totara Last Name match\", function () {",
							"    pm.expect(jsonData[0].lastname).to.eql(LastName);",
							"   });",
							"console.log(\"Student Last Name from SF:\", LastName);",
							"console.log(\"Student Last Name in Totara:\", jsonData[0].lastname);",
							"",
							"pm.test(\"SF to Totara username match\", function () {",
							"    pm.expect(jsonData[0].username).to.eql(StudEmail);",
							"   });",
							"console.log(\"Student username from SF:\", StudEmail);",
							"console.log(\"Student username in Totara:\", jsonData[0].username);",
							"",
							"pm.test(\"SF to Totara Email match\", function () {",
							"    pm.expect(jsonData[0].email).to.eql(StudEmail);",
							"   });",
							"console.log(\"Student Email from SF:\", StudEmail);",
							"console.log(\"Student Email in Totara:\", jsonData[0].email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"followAuthorizationHeader": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_user_get_users_by_field&field=email&values[0]={{StudEmail}}",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_user_get_users_by_field"
						},
						{
							"key": "field",
							"value": "email"
						},
						{
							"key": "values[0]",
							"value": "{{StudEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get course groups user is enrolled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var PFInstanceRef = pm.environment.get(\"PFInstanceRef\"); ",
							"var InsStartUnix = pm.environment.get(\"InsStartUnix\");",
							"var moment = require('moment');",
							"var instTotFormDate = moment(+InsStartUnix).format(\"DD/MM/YY\");",
							"var GrQty = jsonData.groups.length;",
							"if (GrQty > 1){",
							"    pm.test(\"User enrolled into Two or more groups in Course\", function () {",
							"    pm.expect(jsonData.groups[0].courseid).to.eql(0);",
							"    });",
							"    console.log(\"Student enrolled to more then 1 group in this course\");",
							"}",
							"else {",
							"    pm.test(\"User enrolled into correct group in Course\", function () {",
							"    pm.expect(jsonData.groups[0].idnumber).to.eql(PFInstanceRef)});",
							"    console.log(\"Student enrolled to correct group\");",
							"};",
							"// var ActOnUnix = pm.environment.get(\"ActOnUnix\"); ",
							"// var InsStartUnix = pm.environment.get(\"InsStartUnix\"); ",
							"// var SitEndUnix = pm.environment.get(\"SitEndUnix\"); ",
							"// var enrolEndDate;",
							"",
							"// if ((+ActOnUnix + 15778458000) > SitEndUnix){",
							"//     enrolEndDate = SitEndUnix;",
							"// }",
							"// else { enrolEndDate = +ActOnUnix + 15778458000}",
							"// var enrolEndDateTotFormat = moment(+enrolEndDate).format(\"DD/MM/YY\");",
							"// console.log(\"Enrol End time\", enrolEndDateTotFormat);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{TotaraAPIUrl}}?wstoken={{TotaraWStoken}}&wsfunction=core_group_get_course_user_groups&courseid={{TotCourseID}}&userid={{TotUserId}}",
					"host": [
						"{{TotaraAPIUrl}}"
					],
					"query": [
						{
							"key": "wstoken",
							"value": "{{TotaraWStoken}}"
						},
						{
							"key": "wsfunction",
							"value": "core_group_get_course_user_groups"
						},
						{
							"key": "courseid",
							"value": "{{TotCourseID}}"
						},
						{
							"key": "userid",
							"value": "{{TotUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "auth0 token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var auth0_token = jsonData.access_token;",
							"pm.environment.set(\"auth0_token\", auth0_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true,
				"followRedirects": true,
				"followOriginalHttpMethod": false,
				"removeRefererHeaderOnRedirect": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{auth0client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{auth0client_secret}}",
							"type": "text"
						},
						{
							"key": "audience",
							"value": "{{auth0audience}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "{{auth0grant_type}}",
							"type": "text"
						}
					]
				},
				"url": "{{HUBauth0URL}}/oauth/token"
			},
			"response": []
		},
		{
			"name": "get auth0 user data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var FullName = pm.environment.get(\"FullName\"); ",
							"var FirstName = pm.environment.get(\"FirstName\"); ",
							"var LastName = pm.environment.get(\"LastName\");",
							"var StudEmail = pm.environment.get(\"StudEmail\");",
							"var PhoneNum = pm.environment.get(\"PhoneNum\");",
							"var StudAuth0Id = pm.environment.get(\"StudAuth0Id\");",
							"var LastLogin = pm.environment.get(\"LastLogin\");",
							"var Tempauth0lastlogin = jsonData[0].last_login",
							"var moment = require('moment');",
							"var auth0LastLogin = moment(Tempauth0lastlogin).format(\"YYYY-MM-DD\");",
							"pm.test(\"User data from SF to auth0: full name match\", function () {",
							"    pm.expect(jsonData[0].name).to.eql(FullName);",
							"   });",
							"console.log(\"Student full name from SF:\", FullName);",
							"console.log(\"Student full name in Auth0:\", jsonData[0].name);",
							"",
							"pm.test(\"User data from SF to auth0: first name match\", function () {",
							"    pm.expect(jsonData[0].given_name).to.eql(FirstName);",
							"   });",
							"console.log(\"Student first name from SF:\", FirstName);",
							"console.log(\"Student first name in Auth0:\", jsonData[0].given_name);",
							"",
							"pm.test(\"User data from SF to auth0: last name match\", function () {",
							"    pm.expect(jsonData[0].family_name).to.eql(LastName);",
							"   });",
							"console.log(\"Student last name from SF:\", LastName);",
							"console.log(\"Student last name in Auth0:\", jsonData[0].family_name);",
							"",
							"pm.test(\"User data from SF to auth0: Phone match\", function () {",
							"    pm.expect(jsonData[0].user_metadata.phone).to.eql(PhoneNum);",
							"   });",
							"console.log(\"Student Phone from SF:\", PhoneNum);",
							"console.log(\"Student  in Auth0:\", jsonData[0].user_metadata.phone);",
							"",
							"pm.test(\"User data from SF to auth0: email match\", function () {",
							"    pm.expect(jsonData[0].email).to.eql(StudEmail);",
							"   });",
							"console.log(\"Student email from SF:\", StudEmail);",
							"console.log(\"Student email in Auth0:\", jsonData[0].email);",
							"",
							"pm.test(\"User data from SF to auth0: auth0 Id match\", function () {",
							"    pm.expect(jsonData[0].user_id).to.eql(StudAuth0Id);",
							"   });",
							"console.log(\"Student auth0 Id from SF:\", StudAuth0Id);",
							"console.log(\"Student auth0 Id in Auth0:\", jsonData[0].user_id);",
							"",
							"if (LastLogin !== null){",
							"    pm.test(\"User data from SF to auth0: auth0 Last Log in match\", function () {",
							"    pm.expect(auth0LastLogin).to.eql(LastLogin);",
							"    });",
							"    console.log(\"Student Last Log in from SF:\", LastLogin);",
							"    console.log(\"Student Last Log in in Auth0:\", auth0LastLogin);",
							"}",
							"else {pm.test(\"User data from SF to auth0: auth0 Last Log in match\", function () {",
							"    pm.expect(LastLogin).to.eql(null);",
							"    });",
							"    console.log(\"Student was never logged in to Hub/auth0\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{auth0_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HUBauth0URL}}/api/v2/users?q=email:\"{{StudEmail}}\"",
					"host": [
						"{{HUBauth0URL}}"
					],
					"path": [
						"api",
						"v2",
						"users"
					],
					"query": [
						{
							"key": "q",
							"value": "email:\"{{StudEmail}}\""
						}
					]
				}
			},
			"response": []
		}
	]
}